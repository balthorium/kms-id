<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC5280 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC5869 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5869.xml">
<!ENTITY RFC7159 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7159.xml">
<!ENTITY RFC6120 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6120.xml">
<!ENTITY I-D.ietf-jose-json-web-encryption SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-jose-json-web-encryption.xml">
<!ENTITY I-D.ietf-jose-json-web-key SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-jose-json-web-key.xml">
<!ENTITY I-D.ietf-jose-json-web-signature SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-jose-json-web-signature.xml">
<!ENTITY I-D.ietf-jose-json-web-algorithms SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-jose-json-web-algorithms.xml">
<!ENTITY RFC4949 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4949.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC6125 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6125.xml">
<!ENTITY RFC2822 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2822.xml">
<!ENTITY RFC3339 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3339.xml">
<!ENTITY RFC7231 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7231.xml">
<!ENTITY I-D.barnes-pervasive-problem SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.barnes-pervasive-problem.xml">
<!ENTITY I-D.newton-json-content-rules SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.newton-json-content-rules.xml">
<!ENTITY RFC5246 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY RFC4301 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4301.xml">
<!ENTITY RFC5652 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5652.xml">
<!ENTITY RFC4880 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4880.xml">
<!ENTITY I-D.ietf-xmpp-posh SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-xmpp-posh.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-abiggs-saag-key-management-service-02" category="std">

  <front>
    <title abbrev="key-management-service">Key Management Service Architecture</title>

    <author initials="A." surname="Biggs" fullname="Andrew Biggs">
      <organization>Cisco Systems</organization>
      <address>
        <email>adb@cisco.com</email>
      </address>
    </author>
    <author initials="S." surname="Cooley" fullname="Shaun Cooley">
      <organization>Cisco Systems</organization>
      <address>
        <email>shcooley@cisco.com</email>
      </address>
    </author>

    <date year="2015" month="July" day="03"/>

    
    
    

    <abstract>


<t>In the interest of addressing pervasive threats to the confidentiality and integrity of online communications identified by the Internet community <xref target="I-D.barnes-pervasive-problem"/> this specification introduces an open architecture for the establishment, management, and secure distribution of cryptographic keys for use in the end-to-end (E2E) encryption of online communications and shared content.  This architecture allows for the independent deployment of dedicated key management services in a manner that supports the adoption of third-party communications and data sharing services by individuals and organizations that require full and exclusive discretion over the confidentiality of their data.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Providers of cloud-based services commonly secure user data at the transport level using established protocols such as TLS <xref target="RFC5246"/> or IPSec <xref target="RFC4301"/>.  These protocols can be effective in protecting transmitted user data from third party tampering and eavesdropping; however, by themselves these protocols do not secure user data from abuses, negligence, or coerced behavior on the part of the cloud provider.  This is a concern for individuals and organizations that wish to take advantage of cloud-based communications and collaboration but cannot accept the risk of trusting cloud providers with unfettered access to the contents of their communications.</t>

<t>E2E encryption describes a category of solutions that can be employed to address this problem by establishing secure channels among clients.  To the extent that a user can trust their collaboration client software, E2E encryption mitigates exposure of user data to untrusted parties by ensuring that intermediaries never possess unencrypted user data or have access to the keying material necessary to decrypt it.</t>

<t>Existing E2E strategies such as ECS <xref target="RFC5652"/>, PGP <xref target="RFC4880"/>, and Off-the-Record Messaging <xref target="OTR"/> can be effective at securing two-party communications. However, E2E encryption for the growing domain of multiparty communications and online content sharing remains a generally unsolved problem to which these existing approaches do not readily adapt.  In particular, a core challenge exists in providing for the secure distribution and rotation of E2E encryption keys among an arbitrary and potentially dynamic set of communicating clients.  In cases where the communications to be secured are persistent or archived, the additional challenge exists for providing trusted long-term storage and retrieval of these keys.</t>

<t>Equally problematic is the paucity of E2E encryption options that satisfy common organizational obligations such as regulatory compliance and legal discovery.  Entities that must operate within such frameworks require mechanisms by which they (and they alone) may recover the keys used to secure their communications.  Existing E2E encryption solutions are not, by themselves, well suited for this purpose.</t>

<t>In the interest of addressing these challenges this document presents an architecture for the deployment of E2E encryption key management services (KMS).  In this architecture, a KMS provides to its users a means by which their communications clients may securely create, share, rotate, and store E2E encryption keying material.  It does so in a fashion that permits the decoupling of such services from the communications media, thereby permitting the former to reside under the direct control of the communicating parties or the organizations within which they do business.</t>

<section anchor="terminology" title="Terminology">

<t>This document uses the terminology from <xref target="I-D.ietf-jose-json-web-signature"/>, <xref target="I-D.ietf-jose-json-web-encryption"/>, <xref target="I-D.ietf-jose-json-web-key"/>, and <xref target="I-D.ietf-jose-json-web-algorithms"/> when discussing JOSE technologies.</t>

<t>This document makes use of the following terminology, and additionally adopts nomenclature defined in <xref target="I-D.barnes-pervasive-problem"/> for the purpose of describing aspects of pervasive attacks.</t>

<t>communications resource</t>

<t><list style='empty'>
  <t>A communications resource is any uniquely identifiable continuous data channel or discrete shared content that represents an exchange of personal communications between two or more users.</t>
</list></t>

<t>communications resource client</t>

<t><list style='empty'>
  <t>A communications resource client consumes communications resources on behalf of a user and, when deployed in conformance with the KMS architecture, consumes the services of KMS server(s) to facilitate the E2E encryption of those communications resources.</t>
</list></t>

<t>communications resource server</t>

<t><list style='empty'>
  <t>A communications resource server is a provider of services through which communications resources are made available.</t>
</list></t>

<t>cloud provider</t>

<t><list style='empty'>
  <t>An individual or organization responsible for, and in control of, one or more communications resource servers.</t>
</list></t>

<t>E2E encryption</t>

<t><list style='empty'>
  <t>Shorthand for end-to-end encryption, as defined in <xref target="RFC4949"/>, particularly as it applies to the establishment of confidentiality and integrity of communications resources.</t>
</list></t>

<t>KMS server</t>

<t><list style='empty'>
  <t>A key management service (KMS) server is responsible for creating, storing, and providing access to E2E encryption keying material by communications resource clients.</t>
</list></t>

<t>KMS protocol</t>

<t><list style='empty'>
  <t>The protocol through which communications resource clients interoperate with KMS servers.</t>
</list></t>

<t>KMS provider</t>

<t><list style='empty'>
  <t>An individual or organization responsible for, and in control of, a KMS server deployment.</t>
</list></t>

<t>KMS transport</t>

<t><list style='empty'>
  <t>Any service or protocol that provides the basic transport over which KMS protocol messages are exchanged.</t>
</list></t>

<t>resource client</t>

<t><list style='empty'>
  <t>See communications resource client.</t>
</list></t>

<t>resource server</t>

<t><list style='empty'>
  <t>See communications resource server.</t>
</list></t>

<t>trusted party</t>

<t><list style='empty'>
  <t>A trusted party is an individual or organization that is trusted by one or more communicating users to maintain the confidentiality and integrity of their communications resources.</t>
</list></t>

</section>
<section anchor="security-terms" title="Security Terms">

<t>Most security-related terms in this document are to be understood in the sense defined in <xref target="RFC4949"/>; such terms include, but are not limited to, “attack”, “authentication”, “authorization”, “certification authority”, “certification path”, “certificate”, “credential”, “identity”, “self-signed certificate”, “trust”, “trust anchor”, “trust chain”, “validate”, and “verify”.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>In this document, the key words “MUST”, “MUST NOT”, “REQUIRED”,
“SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”,
and “OPTIONAL” are to be interpreted as described in BCP 14, RFC 2119
<xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="architectural-overview" title="Architectural Overview">

<t>The architectural reference model for this specification is illustrated in <xref target="reference-model"/>.  Central to this model is the <spanx style="emph">communications resource server</spanx> which is presumed to be operated by a <spanx style="emph">cloud provider</spanx> for the purpose of offering some form of communications service.  The nature of this service is not prescribed by this specification and may take the form of any of a variety of communications or collaboration services including file sharing, messaging, and VoIP.  Consuming the services of the communications resource server are <spanx style="emph">communications resource clients</spanx> which may be supplied by the cloud provider or developed by third parties.</t>

<figure title="KMS Architecture Reference Model" anchor="reference-model"><artwork><![CDATA[
                         +-----------------+
                         | Communications  |
     +-------------------| Resource Server |-------------------+
     |                   | (Cloud Provider)|                   |
     |                   +-----------------+                   |
     |                                                         |
     |                                                         |
     |                   +-----------------+                   |
     |       +-----------|  KMS Transport  |-----------+       |
     |       |           +-----------------+           |       |
     |       |                    |                    |       |
     |       |   Untrusted        |                    |       | 
- - -|- - - -|- - - - - - - - - - | - - - - - - - - - -|- - - -|- - -
     |       |   Trusted          |                    |       |
     |       |                    |                    |       |
+-----------------+      +-----------------+      +-----------------+
| Communications  |      |    KMS Server   |      | Communications  |
| Resource Client |      |  (KMS Provider) |      | Resource Client |
+-----------------+      +-----------------+      +-----------------+
         |                                                 |
+-----------------+                               +-----------------+
|      Alice      |                               |       Bob       |
+-----------------+                               +-----------------+
]]></artwork></figure>

<t>In addition to the familiar elements described above, this model also includes a key management server, or <spanx style="emph">KMS</spanx>, operated by a <spanx style="emph">KMS provider</spanx>. The KMS server exposes an API through which clients may securely establish and share cryptographic keying material used for the E2E encryption of content that is transited through the cloud provider’s services.  This API is secured in such a way as to ensure these keys are visible to none but the KMS server itself and the clients authorized to consume the content they protect.  This highlights an important distinction between the KMS provider and the cloud provider: while the KMS provider is necessarily a <spanx style="emph">trusted party</spanx>, the cloud provider need not be.</t>

<t>It is an explicit objective of this specification to promote an ecosystem of providers of KMS implementations and KMS services that are distinct and independent of the cloud providers over whose services users communicate.  To that end, this specification seeks to standardize a KMS protocol through which clients and KMS servers interoperate.  This protocol provides for the establishment of a confidential and authenticated channel between each client and KMS server, and defines an API of request and response messages to be exchanged over this secure channel for the purpose of creating, retrieving, and exchanging keys.</t>

<t>While the KMS protocol constitutes a central focus of this specification, the means by which this protocol is transported is expressly out of scope.  This role may be readily addressed through either standards-based or proprietary protocols, and so we refer to this simply as the <spanx style="emph">KMS transport</spanx> for the remainder of this document.  Over this transport, the communication paths between clients and KMS server are encrypted using keys established through an authenticated ephemeral key agreement.  As such, the KMS transport provider need not be regarded as a trusted party, and in fact may be the cloud provider itself.</t>

<t>An important non-goal of this specification is the standardization of any aspect of the cloud provider’s services or the means by which clients utilize shared keys for the E2E encryption of data transiting those services.  By avoiding the application of constraints on the communications services and protocols we enable the use of this specification in the context of existing service deployments, both standards-based and proprietary.  It is similarly a non-goal of this specification to enable federation of secure communications between vendors of different cloud services, as that is the realm of standardized application protocols.  The scope of this specification is intended to be narrowly focused on the task of separating E2E encryption key management from the communications services they secure, thereby facilitating the broadest possible adoption of secure communications though existing services.</t>

</section>
<section anchor="use-cases" title="Use Cases">

<t>The use cases described in this section are non-normative examples meant to illustrate how the KMS architecture may be deployed to provide E2E encryption of different types of communications resources.  These use cases differ in detail, but generally follow a common logical sequence as given below.</t>

<t>Note that all requests to the KMS server are via the KMS transport which, for clarity, has been omitted from the sequence diagrams included in this section.</t>

<figure title="Nominal Use Case" anchor="nominal-usecase"><artwork><![CDATA[
  Resource          Resource          Resource            KMS
  Client B          Client A           Server            Server
     |                 |                 |                 |
     |                 |                 |       (1)       |
     |                 |-----------------|---------------->|
     |                 |       (2)       |                 |
     |                 |---------------->|                 |
     |                 |                 |       (3)       |
     |                 |-----------------|---------------->|
     |                 |       (4)       |                 |
     |-----------------|---------------->|                 |
     |                 |                 |                 |
 (5) |                 |                 |                 |
     |                 |                 |       (6)       |
     |-----------------|-----------------|---------------->|
     |                 |                 |                 |
 (7) |                 |                 |                 |
     |                 |                 |                 |

]]></artwork></figure>

<t><list style="numbers">
  <t>Client A requests the generation of a new unbound key from the KMS.</t>
  <t>Client A encrypts a communications resource using the unbound KMS key and shares it via a resource server.</t>
  <t>Client A requests the creation of a new KMS resource object (KRO) to represent the communications resource.  Client A also instructs the KMS to bind the KMS key used in step (2) to the new KRO and to authorize user B to retrieve keys bound to the KRO.</t>
  <t>Client B accesses the communications resource shared by client A and receives the encrypted data.</t>
  <t>Client B obtains, through some means not defined by this specification, the URL of the KMS key used to encrypt the communications resource.</t>
  <t>Client B requests the KMS key from the KMS server.  The KMS server, recognizing user B as authorized on the KRO to which the key is bound, returns the KMS key.</t>
  <t>Client B decrypts the communications resource using the KMS key.</t>
</list></t>

<section anchor="securing-an-http-file-sharing-service" title="Securing an HTTP File Sharing Service">

<t>Let A be a user that wishes to share a file with users B and C through some HTTP based file sharing service.  In the context of the KMS architecture we may regard the file sharing provider’s HTTP API as the resource server and the users’ HTTP clients as the resource clients.</t>

<t>For this scenario we also assume that the file sharing service is trusted by user A with the role of providing a file sharing service but is not necessarily trusted to adequately protect the confidentiality of the file contents.  User A’s concerns may then be addressed through the introduction of an HTTP based KMS transport (not shown) and KMS server deployed by an entity that A regards as a trusted party.</t>

<figure title="File Sharing Use Case" anchor="fileshare-usecase"><artwork><![CDATA[
     HTTP           HTTP           HTTP       HTTP File         KMS
   Client C       Client B       Client A    Share Server      Server
      |              |              |              |             |
      |              |              |              |     (1)     |
      |              |              |--------------|------------>|
      |              |              |      (2)     |             |
      |              |              |------------->|             |
      |      (3)     |      (3)     |              |             |
      |<-------------|<-------------|--------------|             |
      |              |              |              |     (4)     |
      |              |              |--------------|------------>|
      |              |              |      (5)     |             |
      |              |--------------|------------->|             |
      |              |              |              |     (6)     |
      |              |--------------|--------------|------------>|
      |              |              |              |             |
      |          (7) |              |              |             |
      |              |              |              |             |
  (8) |              |              |              |             |
      |              |              |              |             |
]]></artwork></figure>

<t>This sequence begins with the assumption that each client has, at some point, already established a secure channel to the KMS via authenticated key agreement.</t>

<t><list style="numbers">
  <t>Client A requests from the KMS some number of unbound KMS keys.</t>
  <t>Client A selects an unbound key from the set of keys obtained step (1), encrypts the file to be shared, and posts the encrypted content to the file sharing service.  The file sharing service responds with a URL that uniquely identifies the shared file.</t>
  <t>Clients B and C learn of the newly shared file from the file sharing service (the mechanism by which this occurs is out of scope for this specification).</t>
  <t>Client A requests the creation of a KMS resource object (KRO) on the KMS to represent the shared file.  In this message the client also requests that the key from step (2) be bound to the newly created KRO and that the users of clients B and C be authorized to retrieve keys bound to the KRO.</t>
  <t>Client B retrieves the shared file from the file sharing service.</t>
  <t>Client B requests from the KMS all keys bound to the KRO associated with the shared file’s URL.  Recognizing client B as authorized on the KRO, the KMS returns the key bound to the KRO by client A in step (4).</t>
  <t>Client B decrypts the shared file using the key obtained in step (6).</t>
  <t>Client C performs steps (5) through (7) in the same fashion as client B.</t>
</list></t>

<t>It is worth noting that a race condition does exist where step (6) could occur before step (4) completes.  This will result in a client being temporarily denied access to the key used to encrypt the shared file.</t>

</section>
<section anchor="securing-an-xmpp-multi-user-chat" title="Securing an XMPP Multi-User Chat">

<t>Let A, B and C be users that wish to engage in secure chat through an existing XMPP <xref target="RFC6120"/> multi-user chat (MUC) room.  In the context of the KMS architecture we may regard the XMPP MUC service as the resource server, the users’ XMPP clients as the resource clients, and the XMPP service itself (not shown) as the KMS transport.</t>

<figure title="Multi-User Chat Use Case" anchor="muc-usecase"><artwork><![CDATA[
     XMPP           XMPP           XMPP         XMPP MUC        KMS
   Client C       Client B       Client A        Server        Server
      |              |              |              |             |
      |              |              |              |     (1)     |
      |              |              |--------------|------------>|
      |              |              |              |     (2)     |
      |              |              |--------------|------------>|
      |              |              |      (3)     |             |
      |              |              |------------->|             |
      |      (4)     |      (4)     |              |             |
      |<-------------|<-------------|--------------|             |
      |              |              |              |     (5)     |
      |              |--------------|--------------|------------>|
      |              |              |              |             |
      |          (6) |              |              |             |
      |              |              |              |             |
  (7) |              |              |              |             |
]]></artwork></figure>

<t>This sequence begins with the assumption that a MUC room already exists on the MUC server and that each client has already established a secure channel to the KMS via authenticated key agreement.  All messages are transmitted over XMPP.</t>

<t><list style="numbers">
  <t>Client A requests from the KMS some number of unbound KMS keys.  Client A selects one of these keys for encrypting MUC room messages.</t>
  <t>Client A requests the creation of a KMS resource object (KRO) on the KMS to represent the MUC room.  In this message the client also requests that the key selected in step (1) be bound to the newly created KRO and that the users of clients B and C be authorized to retrieve keys bound to the KRO.</t>
  <t>Client A encrypts a message with the key selected in step (1) and sends it to the MUC room.</t>
  <t>The MUC service delivers client A’s encrypted message to clients B and C.</t>
  <t>Client B requests from the KMS all keys bound to the KRO associated with the MUC room’s URI.  Recognizing client B as authorized on the KRO, the KMS returns the key bound to the KRO by client A in step (2).</t>
  <t>Client B decrypts the shared file using the key selected in step (1).</t>
  <t>Client C performs steps (5) and (6) in the same fashion as client B.</t>
</list></t>

</section>
<section anchor="kms-to-kms-key-federation" title="KMS to KMS Key Federation">

<t>This use case illustrates two KMS instances federating keys associated with a resource.  As KMS servers are deployed to serve groups of users it is inevitable that users will want to share resources across groups or organizations.  This cross-organization sharing of keys leads to several problems.  First, each user is only known to and only knows of one logical KMS.  Second, each organization might have very different archiving requirements due to differing legal compliance regulations due to jurisdiction or industry differences.  Lastly, one or both of the users might be employees of enterprises that need to be able to respond to legal discovery requests.  To address these issues, KMS servers may federate in such a way as to allow for limited copying of keys from one KMS to another.  This permits each KMS’ owning organization the ability to control the ongoing policy regarding access to keys for which their respective users are authorized.</t>

<t>Let Alice@DomainA and Bob@DomainB be users of a common file sharing service and who happen to use different KMS servers to secure their communications.  Assume then that Alice wishes to share a file with Bob and therefore relies on KMS server federation to facilitate the key exchange.</t>

<figure title="File Sharing with KMS Federation Use Case" anchor="fed-usecase"><artwork><![CDATA[
HTTP Client    HTTP Client     HTTP File      KMS Server   KMS Server
Bob@DomainB   Alice@DomainA   Share Server     DomainA       DomainB
     |              |              |      (1)     |             |
     |              |--------------|------------->|             |
     |              |      (2)     |              |             |
     |              |------------->|              |             |
     |      (3)     |              |              |             |
     |<-------------|--------------|              |             |
     |              |              |      (4)     |             |
     |              |--------------|------------->|             |
     |              |      (5)     |              |             |
     |--------------|------------->|              |             |
     |              |              |              |     (6)     |
     |--------------|--------------|--------------|------------>|
     |              |              |              |     (7)     |
     |              |              |              |<------------|
     |              |              |              |     (8)     |
     |              |              |              |<------------|
     |              |              |              |             |
     |              |              |              |             | (9)
     |              |              |              |             |
(10) |              |              |              |             |
     |              |              |              |             |
]]></artwork></figure>

<t>This sequence begins with the assumption that each client has, at some point, already established a secure channel to their respective KMS via authenticated key agreement.</t>

<t><list style="numbers">
  <t>Alice@DomainA requests from the DomainA KMS some number of unbound KMS keys.  Each KMS key is uniquely identified by a URL.</t>
  <t>Alice@DomainA selects a key from the set of KMS keys obtained in step (1), uses that key to encrypt the file to be shared, and posts the encrypted content to the file sharing service.  The file sharing service responds with a URL that uniquely identifies the shared file.</t>
  <t>Bob@DomainB is notified of the newly shared file URL and corresponding KMS key URL through a notification from the file sharing service (or potentially some other means, such an an email from Alice).</t>
  <t>Alice@DomainA requests the creation of a KMS resource object (KRO) on the DomainA KMS to represent the shared file.  In this message Alice also requests that the KMS key from step (2) be bound to the newly created KRO and that the user Bob@DomainB be authorized to retrieve KMS keys bound to the KRO.</t>
  <t>Bob@DomainB retrieves the shared file from the file sharing service.</t>
  <t>Using the KMS key URL obtained in step (3), Bob@DomainB requests the KMS key from the DomainB KMS.</t>
  <t>The DomainB KMS recognizes the KMS key URL as actually hosted by the DomainA KMS.  The DomainB KMS establishes a secure and mutually authenticated channel with the DomainA KMS via the KMS transport.</t>
  <t>The DomainB KMS requests from the DomainA KMS the KRO object to which the KMS key is bound, along with all DomainB user authorizations and other KMS keys that have been bound to that KRO.  The DomainA KMS recognizes that the DomainB KMS is authorized to retrieve all KMS keys for which users in the DomainB domain have been authorized.  It then recognizes that at least one DomainB user (Bob) has been authorized on the KRO created in step (4).  The DomainA KMS therefore decides the DomainB KMS is authorized to make this request and returns the requested information.</t>
  <t>Using the information received from the DomainA KMS, the DomainB KMS verifies that Bob@DomainB is authorized on the KRO, and satisfies the request from step (6) by returning the KMS key to Bob@DomainB.</t>
  <t>Client Bob@DomainB decrypts the shared file using the key obtained in step (9).</t>
</list></t>

<t>Note that in step (9) the DomainB KMS is enforcing authorization policy for the KRO hosted on the DomainA KMS as it pertains to DomainB users.  This is a necessary consequence of KMS federation, where the act of authorizing access to a KRO by a user residing in a federated domain engenders an implicit trust of the KMS server that controls the federated domain.  For that reason, a KMS provider should restrict federation of its KMS servers to domains that the KMS provider regards as trusted.</t>

</section>
</section>
<section anchor="kms-protocol" title="KMS Protocol">

<t>The KMS protocol is composed of a message oriented request and response API and a secure channel over which those messages are exchanged.  The API provides clients with the ability to generate E2E encryption keys, associate those keys with communications resources, and explicitly manage access authorizations on those keys.  The secure channel provides a mutually authenticated and E2E encrypted channel over which the clients and KMS server may exchange API messages securely.  The API and secure channel are described in detail through the remainder of this section.</t>

<section anchor="secure-channel" title="Secure Channel">

<t>The secure channel is an encrypted and mutually authenticated communication path between each client and the KMS server.  It transits the KMS transport which, in the context of this document, represents any service or protocol that may be utilized for the relaying of KMS API request and response messages.  This specification presumes the KMS transport to be untrusted.</t>

<figure title="Establishment of a Secure Channel" anchor="establish-secure-channel"><artwork><![CDATA[
                          (3) Secure Channel
        +===================================================+
        V                                                   V
+-----------------+  (2)   +---------------+   (1)  +---------------+
| Resource Client |<------>| KMS Transport |<------>|   KMS Server  |
+-----------------+        +---------------+        +---------------+
                      |                         |
     Trusted          |        Untrusted        |        Trusted
]]></artwork></figure>

<t>At a high level, the communication path between a resource client and KMS is established as follows.</t>

<t><list style="numbers">
  <t>The KMS actively connects to the KMS transport.  The protocol used for this connection is out of scope for this document, however it MUST support the asynchronous flow of encrypted KMS request and response messages between the KMS and KMS transport.</t>
  <t>A resource client connects to the KMS transport.  The protocol used for this connection is out of scope for this document, however it MUST support the flow of encrypted KMS request and response messages between the resource client and the KMS transport.</t>
  <t>Through an elliptic curve Diffie-Helman key exchange, augmented by server and client authentication, the resource client and KMS establish a shared secret and derived ephemeral key.  This is discussed in greater detail in <xref target="proto-ecdhe"/>.</t>
</list></t>

<t>On successful mutual authentication and ephemeral key agreement, the resource client and KMS communicate through the exchange of sequenced request and response messages encrypted using the ephemeral key.</t>

</section>
<section anchor="proto-user-identity" title="User Identity">

<t>Central to the KMS server’s role as a key store is its ability to restrict access to stored keying material to only authorized users.  This requires robust user authentication and a means for the unambiguous and unique identification of each user.</t>

<t>Conforming KMS architecture deployments MUST rely on an identity provider that supports the generation of OAuth 2.0 <xref target="RFC6749"/> access tokens.  The KMS server MUST rely on same identity provider for the purpose of validating access tokens received from the client.  Access tokens used by clients to demonstrate identity and authorization for access to KMS resources MUST NOT be used for any other service.  Any exposure of a KMS recognized access token to third parties (such as providers of other services) jeopardizes the security of all KMS keys for which the user whose identity is represented by the token is authorized.</t>

<t>The identity provider on which the KMS server relies MAY be the same identity provider as relied upon by the resource server(s) whose communications resources are encrypted with keys managed by the KMS server.  Note, however, the reliable authentication and authorization of clients to the KMS server is critical to the security of the KMS keys it holds.  The identity provider on which the KMS relies must therefore necessarily be regarded as a trusted party within the context of the KMS architecture.</t>

<t>Access tokens MUST be conveyed to the KMS server as part of the payload of encrypted KMS API requests as described in <xref target="proto-basic-request-payload"/> and MUST NOT be conveyed in any other manner.</t>

</section>
<section anchor="kms-identity" title="KMS Identity">

<t>Given the untrusted nature of the KMS transport by both the KMS and clients, it is critical for clients to be able to verify the identity of their KMS and ensure that no MITM attacks are carried out on client to KMS or KMS to client communications.  Therefore, the KMS MUST make use of at least one PKIX certificate <xref target="RFC5280"/> and clients MUST validate the PKIX certificate presented by the KMS through the comparison of the certificate’s common name (CN) or subject alternative name (SAN) <xref target="RFC6125"/> fields to the Internet domain portion of the user’s Addr-spec <xref target="RFC2822"/> formatted unique identifier using the procedures defined in section 6 of <xref target="RFC6125"/>.  An acceptable alternative to direct CN or SAN validation is defined in <xref target="I-D.ietf-xmpp-posh"/>.</t>

<t>PKIX certificates presented by the KMS can be issued by either a public or private certification authority with the stipulation that clients MUST be able to validate the KMS’s entire certificate path through the pre-established trust of the root certificate used to anchor the certificate path.  The mechanism for establishing trust of the root certificate is out of scope for this specification, but it is usually carried out through pre-installed trusted root certificates on various operating systems for public certification authorities or through enterprise endpoint management solutions or manual installation tasks for private certification authorities.</t>

</section>
<section anchor="object-types" title="Object Types">

<t>The KMS protocol defines three object types: resources, keys, and authorizations.  It is through the creation and manipulation of instances of these object types that clients interact with the KMS.</t>

<t>Resource</t>

<t><list style='empty'>
  <t>A resource is an object that represents, within the KMS object model, a communications resource as defined in <xref target="terminology"/>.  Keys and user authorizations are associated (bound) to the resource object as a means of representing their logical association with that communications resource.</t>
</list></t>

<t>Key</t>

<t><list style='empty'>
  <t>A key is an object representing symmetric keying material generated and made available to authorized clients by the KMS.  A key may exist in one of two states: “bound”, and “unbound”.  An unbound key is not associated with any resource, whereas a bound key is associated with exactly one resource.</t>
</list></t>

<t>Authorization</t>

<t><list style='empty'>
  <t>An authorization is the association of a user with a particular resource.  When such an association exists between a user and a resource this implies that the user is entitled to retrieve any key that is bound to that resource, and to add or remove authorizations for other users on the same resource.</t>
</list></t>

<t>The KMS protocol is composed from representations of these fundamental object types.  These representations are defined in the following sections.</t>

<section anchor="proto-kms-key-object" title="KMS Key Objects">

<t>The JSON representations for KMS key objects is defined as follows using JSON content rules <xref target="I-D.newton-json-content-rules"/>.</t>

<figure><artwork><![CDATA[
jwk : ; see [JWK]

kmsUri (
  "uri" : uri relative
)

keyRep {
  kmsUri,
  "jwk" : jwk,
  "userId" : string,
  "clientId" : string,
  "createDate" : date-time,
  "expirationDate" : date-time,
  ?"resourceUri" : kmsUri,
  ?"bindDate" : date-time
}

key (
  "key" : keyRep
)

keys (
  "keys" : [ *keyRep ]
)

keyUris (
  "keyUris" : [ *kmsUri ]
)
]]></artwork></figure>

<t>The attributes of a KMS key object are defined as follows.</t>

<t>uri</t>

<t><list style='empty'>
  <t>A standard definition for KMS object identifiers.</t>
</list></t>

<t>jwk</t>

<t><list style='empty'>
  <t>Symmetric keying material represented as a JWK object (see <xref target="I-D.ietf-jose-json-web-key"/>).</t>
</list></t>

<t>userId</t>

<t><list style='empty'>
  <t>The authenticated unique identifier of the user that created the key.</t>
</list></t>

<t>clientId</t>

<t><list style='empty'>
  <t>An opaque unique identifier provided by the client that created the key.</t>
</list></t>

<t>createDate</t>

<t><list style='empty'>
  <t>The point in time when the key was created, in <xref target="RFC3339"/> date-time format.</t>
</list></t>

<t>expirationDate</t>

<t><list style='empty'>
  <t>The point in time after which the key may no longer be bound (if unbound) or may no longer be used for encrypting data (if bound or an ephemeral key).</t>
</list></t>

<t>resourceUri</t>

<t><list style='empty'>
  <t>The uri of the KMS resource object to which the key is bound.</t>
</list></t>

<t>bindDate</t>

<t><list style='empty'>
  <t>The point in time when the key was bound, in <xref target="RFC3339"/> date-time format.</t>
</list></t>

</section>
<section anchor="proto-kms-authorization-object" title="KMS Authorization Objects">

<t>The JSON representations for KMS authorization objects is defined as follows using JSON content rules with references to rules defined in previous sections.</t>

<figure><artwork><![CDATA[
authorizationRep {
  kmsUri,
  "authId" : string,
  "createDate" : date-time,
  "resourceUri" : kmsUri,
}

authorization (
  "authorization" : authorizationRep
)

authorizations (
  "authorizations" : [ *authorizationRep ]
)

authorizationUris (
  "authorizationUris" : [ *kmsUri ]
)
]]></artwork></figure>

<t>The attributes of a KMS authorization object are defined as follows.</t>

<t>uri</t>

<t><list style='empty'>
  <t>A standard definition for KMS object identifiers.</t>
</list></t>

<t>authId</t>

<t><list style='empty'>
  <t>A unique identifier of the authorized entity.  The exact semantics of this attribute are out of scope for this document, however it is RECOMMENDED that an implementation regard the value of this attribute as mapped to either an individual identity or a grouping of identities as recognized by the identity provider employed by the KMS.  The value of this attribute may also be the URI of a KRO, in which case all authorizations on the indicated KRO will be regarded by the KMS as also applying to the KRO to which this authorization object belongs.</t>
</list></t>

<t>createDate</t>

<t><list style='empty'>
  <t>The point in time when the authorization was created, in <xref target="RFC3339"/> date-time format.</t>
</list></t>

<t>resourceUri</t>

<t><list style='empty'>
  <t>The object identifier of the resource to which the authorization applies.</t>
</list></t>

<t>Note, with respect to this specification user identifiers are opaque, however they MUST map to unique identifiers provided as part of user authentication.</t>

</section>
<section anchor="proto-kms-resource-object" title="KMS Resource Objects (KRO)">

<t>The JSON representation for KMS resource objects is defined as follows using JSON content rules with references to rules defined in previous sections.</t>

<figure><artwork><![CDATA[
resourceRep {
  kmsUri,
  keys / keyUris,
  authorizations / authorizationUris,
  ttl
}

resource (
  "resource" : resourceRep
)

resources (
  "resources" : [ *resourceRep ]
)

resourceUris (
  "resourceUris" : [ *kmsUri ]
)
]]></artwork></figure>

<t>The attributes of a KMS resource object are defined as follows.</t>

<t>uri</t>

<t><list style='empty'>
  <t>A standard definition for KMS object identifiers.</t>
</list></t>

<t>keys</t>

<t><list style='empty'>
  <t>An array of key object representations, one for each key bound to the resource.</t>
</list></t>

<t>keyUris</t>

<t><list style='empty'>
  <t>An array of key object identifiers, one for each key bound to the resource.  Only one of either keys or keyUris may be present in a resource object representation.</t>
</list></t>

<t>authorizations</t>

<t><list style='empty'>
  <t>An array of authorization object representations, one for each authorization on the resource.</t>
</list></t>

<t>authorizationUris</t>

<t><list style='empty'>
  <t>An array of authorization object identifiers, one for each authorization on the resource.  Only one of either authorizations or authorizationUris may be present in a resource object representation.</t>
</list></t>

</section>
</section>
<section anchor="request-types" title="Request Types">

<t>The KMS protocol defines four types of requests: create, retrieve, update, delete, each of which may be applied to one of the three KMS object types.  Note that not all object types support all requests types.  A KMS need only support those combinations of request type and object type explicitly defined in this document.</t>

<t>Create</t>

<t><list style='empty'>
  <t>A create operation acts upon an object type, creating one or more new instances of that object type.</t>
</list></t>

<t>Retrieve</t>

<t><list style='empty'>
  <t>A retrieve operation acts upon an object or object type, returning in the response a representation of one or more object instances.</t>
</list></t>

<t>Update</t>

<t><list style='empty'>
  <t>An update operation acts upon an object, altering mutable properties of that object.</t>
</list></t>

<t>Delete</t>

<t><list style='empty'>
  <t>A delete operation acts upon an object, removing that object from the KMS.</t>
</list></t>

</section>
<section anchor="message-structure" title="Message Structure">

<t>Every KMS request and response message is composed of a JSON <xref target="RFC7159"/> formatted payload encapsulated within either a JWE <xref target="I-D.ietf-jose-json-web-encryption"/> or JWS <xref target="I-D.ietf-jose-json-web-signature"/> object.  These messages may be divided into three types.</t>

<t>Common Messages</t>

<t><list style='empty'>
  <t>Common messages include all those which do not meet the definition of either key agreement message or error message.  Common messages are encrypted as JWE objects using the shared ephemeral key established during initial key agreement between the client and KMS (see <xref target="proto-ecdhe"/>).  The value of the JWE header “kid” attribute of a common message MUST match that of the KMS ephemeral key object URI attribute established during initial key agreement.</t>
</list></t>

<t>Ephemeral Key Agreement Messages</t>

<t><list style='empty'>
  <t>Ephemeral key agreement messages are those exchanged between the client and KMS for the purpose of establishing a new shared ephemeral key (see <xref target="proto-ecdhe"/>).  Key agreement request payloads are encrypted as JWE objects using the authenticated and validated static public key of the KMS.  Key agreement response payloads are signed as JWS objects using the static private key of the KMS.  The value of the JWE or JWS header “kid” attribute of an ephemeral key agreement message MUST be a well known key identifier for the KMS static public key.</t>
</list></t>

<t>Error Messages</t>

<t><list style='empty'>
  <t>Error messages are those originated by the KMS to indicate a failed request.  Error messages are composed in the same fashion as common messages; however, in the event that the KMS does not recognize the ephemeral key used in the request, or that key is determined to have expired, the KMS MUST respond with an unencrypted message composed as a JWS, with a payload as described in <xref target="proto-error"/>, and signed using the KMS server’s static public key.</t>
</list></t>

<t>The basic JSON representations for the request and response payloads are defined in the following sections.</t>

<section anchor="proto-basic-request-payload" title="Basic Request Payload">

<t>The basic JSON representation for KMS request message payloads is defined as follows using JSON content rules with references to rules defined in previous sections.</t>

<figure><artwork><![CDATA[
requestId (
  "requestId" : integer
)

credential {
  "userId": ?string
  "bearer": string / "jwk": jwk
}

client {
  "clientId": string,
  "credential": credential
)

method: string /create|retrieve|update|delete/

request (
  "client" : client,
  "method" : method,
  kmsUri,
  requestId
)
]]></artwork></figure>

<t>The attributes of a KMS request message payload are defined as follows.</t>

<t>requestId</t>

<t><list style='empty'>
  <t>A string selected by the client and provided in each request to uniquely identify the request.  The string is treated opaquely by the server and returned verbatim in the associated response.</t>
</list></t>

<t>userId</t>

<t><list style='empty'>
  <t>The unique identifier of the user making the request.  This field is optional, and MUST be disregarded if the requesting user’s identity can be securely derived from either the bearer token or jwk.</t>
</list></t>

<t>bearer</t>

<t><list style='empty'>
  <t>An <xref target="RFC6749"/> access token issued by the client’s identity provider and validated by the KMS in cooperation with the identity provider.  See <xref target="proto-user-identity"/>.</t>
</list></t>

<t>jwk</t>

<t><list style='empty'>
  <t>A JWK object, in JSON format as defined in <xref target="I-D.ietf-jose-json-web-key"/>, containing the public key of the client (presumably a server).  This JWK MUST contain an x5c header with a certificate chain that may be used to positively validate the public key.</t>
</list></t>

<t>clientId</t>

<t><list style='empty'>
  <t>An opaque unique identifier provided by the client (not used for authentication, only to assist multiple clients of a single user in differentiating between their respective unbound keys).</t>
</list></t>

<t>method</t>

<t><list style='empty'>
  <t>Indicates the request type: create, retrieve, update, or delete.</t>
</list></t>

<t>uri</t>

<t><list style='empty'>
  <t>The KMS object or object type to which the request applies.</t>
</list></t>

<t>The JSON content rules above are used in conjunction with additional request type specific rules, defined later in this document, to produce the full request payload definition for each KMS operation.</t>

</section>
<section anchor="proto-basic-response-payload" title="Basic Response Payload">

<t>The basic JSON representation for KMS request message payloads is defined as follows using JSON content rules with references to rules defined in previous sections.</t>

<figure><artwork><![CDATA[
response (
  "status" : integer,
  ?"reason" : string,
  requestId
)
]]></artwork></figure>

<t>The attributes of a KMS request message payload are defined as follows.</t>

<t>status</t>

<t><list style='empty'>
  <t>Indicates the success or failure of the request.  The value returned in a response status attribute SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the success or failure condition of the KMS request.</t>
</list></t>

<t>reason</t>

<t><list style='empty'>
  <t>An optional natural language string to describe the response status in terms that are useful for tracing and troubleshooting the API.</t>
</list></t>

<t>requestId</t>

<t><list style='empty'>
  <t>An echo of the requestId provided in the request.</t>
</list></t>

<t>The JSON content rules above are used in conjunction with additional response type specific rules, defined later in this document, to produce the full response payload definition for each KMS operation.</t>

</section>
<section anchor="proto-error" title="Error Response Payload">

<t>The JSON representation for KMS error response message payloads is defined as follows using JSON content rules with references to rules defined in previous sections.</t>

<t>Error response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response
}
]]></artwork></figure>

<t>Error response message example:</t>

<figure><artwork><![CDATA[
JWS(K_kms_priv, {
  "status": 403,
  "reason": "The ephemeral key used in the request has expired.",
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5"
})
]]></artwork></figure>

</section>
</section>
<section anchor="requests" title="Requests">

<t>The following sections provide detailed descriptions for each of the request and response operations that may occur between a resource client and the KMS.</t>

<section anchor="proto-ecdhe" title="Create Ephemeral Key">

<t>The first operation between a client and KMS MUST be the establishment of a shared secret and derived ephemeral key.  This is necessary as all other requests and responses are encrypted with the ephemeral key.</t>

<t>The client request for creating an ephemeral key conforms to the basic request message payload, where the method is “create” and the uri is “/ecdhe”.  In addition to the basic payload, the client provides a jwk attribute for which the value is a JWK object <xref target="I-D.ietf-jose-json-web-key"/> containing the public part of an EC key pair generated by the client.  Unlike a basic request message, however, the request payload is encrypted as the content of a JWE <xref target="I-D.ietf-jose-json-web-key"/> object secured with the static public key of the KMS server (K_kms_pub) as obtained from the server’s validated PKIX certificate <xref target="RFC5280"/>.</t>

<t>Note, the client MUST generate a new EC key pair for every create ephemeral key request sent to the KMS server.</t>

<t>Request payload definition:</t>

<figure><artwork><![CDATA[
root {
  request,
  jwk
}
]]></artwork></figure>

<t>Request message example:</t>

<figure><artwork><![CDATA[
JWE(K_kms_pub, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }, 
  "method": "create",
  "uri": "/ecdhe",
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "jwk" : {
    "kty": "EC",
    "crv": "P-256",
    "x": "VoFkf6Wk5kDQ1ob6csBmiMPHU8jALwdtaap35Fsj20M",
    "y": "XymwN6u2PmsKbIPy5iij6qZ-mIyej5dvZWB_75lnRgQ"
  }
})
]]></artwork></figure>

<t>On receiving the ephemeral key creation request, the KMS server MUST verify the credential provided in the request.  If a bearer token is provided, the KMS MUST validate the token in cooperation with the identity provider.  If a jwk is provided, the KMS MUST validate the included PKIX certificate chain against the KMS server’s trust root.  In either case, the identity of the requesting client MUST be authenticated and verified to correspond to either an authorized user of the KMS or an authorized trusted service.  If verification fails, the KMS MUST NOT use the server response to continue with key agreement.</t>

<t>Upon successful authentication and authorization of the request, the KMS responds by generating its own EC key pair using the same curve as indicated in the “crv” attribute of the request message JWK.  The KMS server returns the public part of this key pair to the resource client in the form of a KMS key object within the response payload.  The KMS also generates and includes within the response payload a new key uri to be regarded by both client and KMS as the key identifier of the agreed upon ephemeral key.  The response payload is returned to the resource client as the content of a JWS <xref target="I-D.ietf-jose-json-web-signature"/> signed using the static private key of the KMS server (K_kms_priv).</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response,
  key
}
]]></artwork></figure>

<t>Response message example:</t>

<figure><artwork><![CDATA[
JWS(K_kms_priv, {
  "status": 201,
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "key": {
    "uri": "/ecdhe/ea9f3858-1240-4328-ae22-a15f6072306f",
    "jwk" : {
      "kty": "EC",
      "crv": "P-256",
      "x": "8mdasnEZac2LWxMwKExikKU5LLacLQlcOt7A6n1ZGUC",
      "y": "lxs7ln5LtZUE_GE7yzc6BZOwBxtOftdsr8HVh-14ksS"
    },
    "userId": "842e2d82-7e71-4040-8eb9-d977fe888807",
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "createDate": "2014-10-09T15:54:48Z",
    "expirationDate": "2014-10-09T16:54:48Z"
  }
})
]]></artwork></figure>

<t>If successful, the KMS response to a create ephemeral key request MUST have a status of 201.  In the case of a request failure, the KMS response status SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the failure condition.  In addition, the ephemeral key SHOULD have the createDate assigned as the current time and an expirationDate assigned as the latest point in time before which the key may be used for encrypting messages (both in <xref target="RFC3339"/> date-time format).</t>

<t>On receiving the ephemeral key creation response, the resource client MUST verify the received JWS against the KMS server’s validated static public key.  If verification fails, the client MUST NOT use the server response to continue with key agreement.</t>

<t>To generate the shared secret, both resource client and KMS server use ECDH shared secret derivation with the private part of the local EC key pair and the public part of the remote EC key pair.  The shared secret is then provided as input to HKDF (with both extract and expand, and empty salt) <xref target="RFC5869"/> to generate the ephemeral key (K_ephemeral).</t>

<t>The ephemeral key generated by this operation is used to encrypt all subsequent KMS requests and responses passed between the resource client and KMS.  When encrypting such a message, the sender MUST assign a value to the kid attribute of the header of the resulting JWE object, and this value MUST match the URL of the key as provided to the client in the KMS response message described above.  This provides the recipient with a means for identifying the key necessary to decrypt the message.</t>

<t>The KMS SHOULD accept messages encrypted with the ephemeral key up to and until the key expiration date as provided in the response message described above.  On expiration of the ephemeral key, the KMS MUST reject all further requests submitted using this key, and a client wishing to submit further requests to the KMS MUST re-establish the secure channel by requesting the creation of a new ephemeral key.</t>

</section>
<section anchor="delete-ephemeral-key" title="Delete Ephemeral Key">

<t>In the event that a resource client’s ephemeral key has become compromised, a client SHOULD submit a request to the KMS to delete the ephemeral key.</t>

<t>The request message conforms to the basic request message structure, where the method is “delete”, and the uri is that of the ephemeral key to be deleted.</t>

<t>Request payload definition:</t>

<figure><artwork><![CDATA[
root {
  request
}
]]></artwork></figure>

<t>Request message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "delete",
  "uri": "/ecdhe/ea9f3858-1240-4328-ae22-a15f6072306f",
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5"
})
]]></artwork></figure>

<t>The response message conforms to the basic response message structure, and MUST NOT include a representation of the deleted ephemeral key.</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response
}
]]></artwork></figure>

<t>Response message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "status": 204,
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5"
})
]]></artwork></figure>

<t>If successful, the KMS response to a delete ephemeral key request MUST have a status of 204.  In the case of a request failure, the KMS response status SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the failure condition.</t>

<t>On successful deletion of an ephemeral key, the KMS MUST NOT, from that time forward, accept any requests encrypted with that ephemeral key.</t>

</section>
<section anchor="create-resource" title="Create Resource">

<t>When a client intends to initiate E2E encryption of a communications resource, it begins by requesting the creation of a KMS resource object.  This resource object logically represents the communications resource within the KMS data model.</t>

<t>As part of a create resource request, a KMS server MUST create at least one authorization object on the newly created resource object to explicitly authorize the user making the request.  A client MAY request the immediate creation of one or more additional authorizations such that corresponding users may be immediately authorized to access and operate on the new resource object.  If for any reason one or more requested authorizations cannot be applied to the new resource object, the entire create resource request MUST be failed by the KMS.</t>

<t>As part of a create resource request, a client MAY request the immediate binding of one or more unbound KMS keys to the new resource object.  If any key indicated in the request is already bound, or is otherwise invalid (e.g. expired), the entire create resource request MUST be failed by the KMS.</t>

<t>Also, the client MAY request a time to live for the new resource object. The TTL is in seconds with a default of 0 (never expires). Implementations MAY enforce minimum and/or maximum values for TTL. If a requested TTL value is not within the server’s acceptable range, it SHOULD respond with a 400 and response message indicating the server’s acceptable range.</t>

<t>The request message conforms to the basic request message structure, where the method is “create”, the uri is “/resources”, and additional user identifiers and/or key URIs are provided in a manner consistent with the following.</t>

<t>Request payload definition:</t>

<figure><artwork><![CDATA[
authIds (
  "authIds" : [ *string ]
)

root {
  request,
  ?authIds,
  ?keyUris,
  ?ttl
}
]]></artwork></figure>

<t>Request message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "create",
  "uri": "/resources",
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "authIds": [
    "b46e8124-b6e8-47e0-af0d-e7f1a2072dac",
    "39d56a84-c6f9-459e-9fd1-40ab4ad3e89a"
  ],
  "keyUris": [
    "/keys/b4cba4da-a984-4af2-b54f-3ca04acfe461",
    "/keys/2671413c-ab80-4f19-a0a4-ae07e1a94e90"
  ],
  "ttl": 604800
})
]]></artwork></figure>

<t>The response message conforms to the basic response message structure, and includes a representation of the created KMS resource object.</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response,
  resource
}
]]></artwork></figure>

<t>Response message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "status": 201,
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "resource": {
      "uri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094",
      "authorizationUris": [
        "/authorizations/50e9056d-0700-4919-b55f-84cd78a2a65e",
        "/authorizations/db4c95ab-3fbf-42a8-989f-f53c1f13cc9a"
      ],
      "keyUris": [
        "/keys/b4cba4da-a984-4af2-b54f-3ca04acfe461",
        "/keys/2671413c-ab80-4f19-a0a4-ae07e1a94e90"
      ],
      "expirationDate": "2014-10-09T16:54:48Z"
  }
})
]]></artwork></figure>

<t>If successful, the KMS response to a create resource request MUST have a status of 201.  In the case of a request failure, the KMS response status SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the failure condition.</t>

</section>
<section anchor="retrieve-resource" title="Retrieve Resource">

<t>A client that is authorized on a given KMS resource object may retrieve the current state of that object as well as that of current set of KMS authorization objects and bound KMS keys.</t>

<t>The request message conforms to the basic request message structure, where the method is “retrieve”, and the uri is that of the KMS resource object as returned by the create operation from which it originated.</t>

<t>Request payload definition:</t>

<figure><artwork><![CDATA[
root {
  request
}
]]></artwork></figure>

<t>Request message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "retrieve",
  "uri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094",
  "requestId": "db1e4d2a-d483-4fe7-a802-ec5c0d32295f",
})
]]></artwork></figure>

<t>The response message conforms to the basic response message structure, and includes a representation of the retrieved KMS resource object.</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response,
  resource
}
]]></artwork></figure>

<t>Response message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "status": 200,
  "requestId": "db1e4d2a-d483-4fe7-a802-ec5c0d32295f",
  "resource": {
      "uri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094",
      "authorizationUris": [
        "/authorizations/50e9056d-0700-4919-b55f-84cd78a2a65e",
        "/authorizations/db4c95ab-3fbf-42a8-989f-f53c1f13cc9a"
      ],
      "keyUris": [
        "/keys/b4cba4da-a984-4af2-b54f-3ca04acfe461",
        "/keys/2671413c-ab80-4f19-a0a4-ae07e1a94e90"
      ]
  }
})
]]></artwork></figure>

<t>If successful, the KMS response to a retrieve resource request MUST have a status of 200.  In the case of a request failure, the KMS response status SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the failure condition.</t>

</section>
<section anchor="create-keys" title="Create Keys">

<t>When a client requires a symmetric key for use in the E2E encryption of a communications resource, it begins by requesting the creation of one or more keys from the KMS.  The initial state of a newly created key is “unbound” in the sense that it does not yet belong to a particular resource.  A client may submit this request at any time, even before the communications resource exists.  The keys returned by this request are unbound, which is to say not yet associated with any KMS resource object.</t>

<t>The request message conforms to the basic request message structure, where the method is “create”, the uri is “/keys”, and an additional count attribute is introduced to indicate the number of keys to be created.</t>

<t>Request payload definition:</t>

<figure><artwork><![CDATA[
root {
  request,
  "count": integer
}
]]></artwork></figure>

<t>Request message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "create",
  "uri": "/keys",
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "count": 2  
})
]]></artwork></figure>

<t>The response message conforms to the basic response message structure with the addition of an array of key object representations, one for each unbound key created.</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response,
  keys / keyUris
}
]]></artwork></figure>

<t>Response message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "status": 201,
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "keys": [
    {
      "uri": "/keys/52100fa4-c222-46d0-994d-1ca885e4a3a2",
      "jwk": {
        "kid": "52100fa4-c222-46d0-994d-1ca885e4a3a2",
        "kty": "oct",
        "k": "ZMpktzGq1g6_r4fKVdnx9OaYr4HjxPjIs7l7SwAsgsg"
      }
      "userId": "842e2d82-7e71-4040-8eb9-d977fe888807",
      "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
      "createDate": "2014-10-09T15:54:48Z",
      "expirationDate": "2014-10-09T16:04:48Z"
    },
    {
      "uri": "/keys/fed33890-f9fa-43ad-a9f8-ab55a983a543",
      "jwk": {
        "kid": "fed33890-f9fa-43ad-a9f8-ab55a983a543",
        "kty": "oct",
        "k": "q2znCXQpbBPSZBUddZvchRSH5pSSKPEHlgb3CSGIdpL"
      }
      "userId": "842e2d82-7e71-4040-8eb9-d977fe888807",
      "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
      "createDate": "2014-10-09T15:54:48Z",
      "expirationDate": "2014-10-09T16:04:48Z"
    }
  ]
})
]]></artwork></figure>
<t>Each key object in the response to a create unbound keys request includes a single JWK <xref target="I-D.ietf-jose-json-web-key"/> representing a new symmetric key of 256 bits generated by a cryptographically secure PRNG.  Note that, as unbound keys, the resourceUri attribute of each key is either undefined or null.  All keys SHOULD have the createDate assigned as the current time and an expirationDate assigned as the latest point in time before which the key may be bound to a resource (both in <xref target="RFC3339"/> date-time format).</t>

<t>The clientId attribute of each created key MUST be the clientId provided by the client in the client.clientId attribute of the request.</t>

<t>As shown in the response payload definition, the KMS MUST return either an array of key object representations or an array of key object uris.  It is at the KMS server’s discretion which of these is returned.</t>

<t>If successful, the KMS response to a create unbound keys request MUST have a status of 201.  In the case of a request failure, the KMS response status SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the failure condition.</t>

</section>
<section anchor="update-key-bind" title="Update Key (Bind)">

<t>To initiate the use of an unbound KMS key in securing a communications resource, a client will create a corresponding KMS resource object and subsequently bind the unbound key to that resource.  A client MAY begin using an unbound KMS key to encrypt a communications resource prior to the binding of that key.</t>

<t>The request message conforms to the basic request message structure, where the method is “update”, the uri is that of the key to be bound, and an additional resourceUri attribute is introduced to indicate the KMS resource object to which the key is to be bound.  If the user making a bind unbound key request does not have an authorization on the resource indicated by the resourceUri, or is not the user for whom the unbound key was originally created, the KMS MUST fail the request.  The KMS SHOULD fail the request if the clientId of the request does not match that of the unbound key.</t>

<t>Request payload definition:</t>

<figure><artwork><![CDATA[
root {
  request,
  "resourceUri" : kmsUri
}
]]></artwork></figure>

<t>Request message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "update",
  "uri": "/keys/52100fa4-c222-46d0-994d-1ca885e4a3a2",
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "resourceUri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094"
})
]]></artwork></figure>

<t>The response message conforms to the basic response message structure, and includes a representation of the full state of the newly bound key.</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response,
  key
}
]]></artwork></figure>

<t>Response message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
{
  "status": 200,
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "key": {
    "uri": "/keys/52100fa4-c222-46d0-994d-1ca885e4a3a2",
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "jwk": {
      "kid": "52100fa4-c222-46d0-994d-1ca885e4a3a2",
      "kty": "oct",
      "k": "ZMpktzGq1g6_r4fKVdnx9OaYr4HjxPjIs7l7SwAsgsg"
    }
    "userId": "842e2d82-7e71-4040-8eb9-d977fe888807",
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "createDate": "2014-10-09T15:54:48Z",
    "bindDate": "2014-10-09T15:55:34Z",
    "expirationDate": "2014-10-10T15:55:34Z",
    "resourceUri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094"
  }
})
]]></artwork></figure>

<t>On successfully binding a formerly unbound KMS key to a resource object, the state of the KMS key object MUST reflect the updated resourceUri attribute,  MUST reflect a bindDate as the current time, and MUST reflect an expirationDate as the time after which clients MUST NOT use this key for encryption as provided by KMS policy.  Subsequently, the KMS MUST regard the key as bound to the KMS resource object identified by the resourceUri and MUST reject subsequent requests to bind the same key to any other resource object.</t>

<t>If successful, the KMS response to a bind unbound key request MUST have a status of 200.  In the case of a request failure, the KMS response status SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the failure condition.</t>

</section>
<section anchor="retrieve-keys" title="Retrieve Keys">

<t>Clients engaging in E2E encryption require a means for retrieving keys from the KMS.  A key request may take one of three forms, it may be a request for</t>

<t><list style="symbols">
  <t>a specific key,</t>
  <t>all keys bound to a particular resource,</t>
  <t>a subset of keys bound to a particular resource.</t>
</list></t>

<t>In all cases, the request message conforms to the basic request message structure with “retrieve” as the value for the method attribute.</t>

<t>To retrieve an individual key, the uri of the request is that of the key object to be retrieved.  If the key is unbound, the KMS MUST reject the request unless it originates from the user that requested the key’s creation, and SHOULD reject the request unless it originates from the same client that requested the key’s creation (as determined by clientId).  If the key is bound, the KMS MUST reject the request if the request originates from a user for which there does not exist a corresponding authorization on the resource to which the requested key is bound.</t>

<t>To retrieve all keys bound to a resource, the uri of the request is that of the resource concatenated with “/keys”.  The KMS MUST reject the request if the request originates from a user for which there does not exist a corresponding authorization on the resource.</t>

<t>To retrieve a subset of keys bound to a resource, the client submits a request in the same fashion as for requesting all keys but also includes one or more additional attributes indicating selection criteria.  These additional attributes include the following:</t>

<t><list style="symbols">
  <t>boundAfter</t>
  <t>boundBefore</t>
</list></t>

<t>Each of these parameters is optional and clients MAY employ them in any combination.</t>

<t>If the request includes a “boundAfter” attribute, the value MUST conform to the <xref target="RFC3339"/> date-time format and the KMS response MUST NOT include any key with a “bindDate” that chronologically precedes it.  Similarly, if the request includes a “boundBefore” attribute, the value MUST conform to the <xref target="RFC3339"/> date-time format and the KMS response MUST NOT include any key with a “bindDate” that is either equal to or chronologically subsequent to it.</t>

<t>To limit the number of keys returned in a KMS response, a client MAY include a “count” attribute.  If the request includes a “count” attribute, it must be of JSON type integer and the cardinality of the set of keys returned in the KMS response MUST NOT exceed its value.  In the event it becomes necessary for the KMS to truncate the set of keys included in the KMS response, due to the limitations imposed by the “count” attribute, the truncated subset MUST be composed of those keys which satisfy the request’s other selection criteria (if any) and also constitute a subset of that selection for which the elements possess the chronologically largest “bindDate” values.</t>

<t>Request payload definition:</t>

<figure><artwork><![CDATA[
root {
  request,
  ?"boundAfter" : date-time,
  ?"boundBefore" : date-time,
  ?"count" : integer
}
]]></artwork></figure>

<t>Request message example (individual key):</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "retrieve",
  "uri": "/keys/52100fa4-c222-46d0-994d-1ca885e4a3a2",
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5"
})
]]></artwork></figure>

<t>Request message example (10 most recently bound keys):</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "retrieve",
  "uri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094/keys",
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "count": 10
})
]]></artwork></figure>

<t>Request message example (keys bound after a given time, 25 max):</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "retrieve",
  "uri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094/keys",
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "boundAfter": "2015-01-11T18:23:21Z",
  "count": 25
})
]]></artwork></figure>

<t>The response message conforms to the basic response message structure and includes a representation of the key or keys selected by the request.  When responding to a request for a specific key, the KMS will return a response that includes a KMS key object representation as described in <xref target="proto-kms-key-object"/>.  When responding to a request for multiple keys, the KMS will return a response that includes an array of KMS key object representations.</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response,
  key / keys
}
]]></artwork></figure>

<t>Response message example (for specific key):</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
{
  "status": 200,
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "key": {
    "uri": "/keys/52100fa4-c222-46d0-994d-1ca885e4a3a2",
    "jwk": {
      "kid": "52100fa4-c222-46d0-994d-1ca885e4a3a2",
      "kty": "oct",
      "k": "ZMpktzGq1g6_r4fKVdnx9OaYr4HjxPjIs7l7SwAsgsg"
    }
    "userId": "842e2d82-7e71-4040-8eb9-d977fe888807",
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "createDate": "2014-10-09T15:54:48Z",
    "bindDate": "2014-10-09T15:55:34Z",
    "expirationDate": "2014-10-10T15:55:34Z",
    "resourceUri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094"
  }
})
]]></artwork></figure>

<t>Response message example (for keys bound to a specific resource):</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
{
  "status": 200,
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "keys": [
  {
    "uri": "/keys/52100fa4-c222-46d0-994d-1ca885e4a3a2",
    "jwk": {
      "kid": "52100fa4-c222-46d0-994d-1ca885e4a3a2",
      "kty": "oct",
      "k": "ZMpktzGq1g6_r4fKVdnx9OaYr4HjxPjIs7l7SwAsgsg"
    }
    "userId": "842e2d82-7e71-4040-8eb9-d977fe888807",
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "createDate": "2014-10-09T15:54:48Z",
    "bindDate": "2014-10-09T15:55:34Z",
    "expirationDate": "2014-10-10T15:55:34Z",
    "resourceUri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094"
  },
  {
    "uri": "/keys/fed33890-f9fa-43ad-a9f8-ab55a983a543",
    "jwk": {
      "kid": "fed33890-f9fa-43ad-a9f8-ab55a983a543",
      "kty": "oct",
      "k": "q2znCXQpbBPSZBUddZvchRSH5pSSKPEHlgb3CSGIdpL"
    }
    "userId": "842e2d82-7e71-4040-8eb9-d977fe888807",
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "createDate": "2014-10-09T15:54:48Z",
    "bindDate": "2014-10-09T15:56:43Z",
    "expirationDate": "2014-10-10T15:56:43Z",
    "resourceUri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094"
  }]
})
]]></artwork></figure>

<t>If successful, the KMS response to a retrieve bound keys request MUST have a status of 200.  In the case of a request failure, the KMS response status SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the failure condition.</t>

</section>
<section anchor="create-authorizations" title="Create Authorizations">

<t>An authorization establishes a relationship between a resource and a user that entitles the user to retrieve bound keys from, and bind new keys to, that resource.  The KMS resource authorization model is viral in the sense that, once a user has been authorized on a resource, that user is also entitled to authorize other users on that resource.  These authorizations are created through create authorization requests.</t>

<t>The request message conforms to the basic request message structure, where the method is “create”, and the uri is “/authorizations”.  Additional attributes are required to indicate the resource on which authorizations are to be added, as well as the set of users for whom these new authorizations are to be created.</t>

<figure><artwork><![CDATA[
root {
  request,
  "resourceUri" : kmsUri,
  "authIds" : [ *string ]
}
]]></artwork></figure>

<t>Request message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "create",
  "uri": "/authorizations",
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "resourceUri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094",
  "authIds": [
    "119a0582-2e2b-4c0c-ba6a-753d05171803",
    "557ac05d-5751-43b4-a04b-e7eb1499ee0a"
  ]
})
]]></artwork></figure>

<t>The response message conforms to the basic response message structure, and includes a representation of the set of KMS authorization objects created by the request.</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response,
  authorizations
}
]]></artwork></figure>

<t>Response message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
{
  "status": 201,
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "authorizations": [
  {
    "uri": "/authorizations/79a39ed9-a8e5-4d1f-9ae2-e27857fc5901",
    "authId": "119a0582-2e2b-4c0c-ba6a-753d05171803",
    "resourceUri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094"
  },
  {
    "uri": "/authorizations/5aaca3eb-ca4c-47c9-b8e2-b20f47568b7b",
    "authId": "557ac05d-5751-43b4-a04b-e7eb1499ee0a",
    "resourceUri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094"
  }]
})
]]></artwork></figure>

<t>If successful, the KMS response to a create authorizations request MUST have a status of 201.  In the case of a request failure, the KMS response status SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the failure condition.  If for any reason one or more requested authorizations cannot be created or applied to the resource object, the entire create authorizations request MUST be failed by the KMS.</t>

</section>
<section anchor="retrieve-authorizations" title="Retrieve Authorizations">

<t>A client may explicitly request the set of all authorizations on a given KMS resource object.  The uri of the request is that of the resource concatenated with “/authorizations”.  The KMS MUST reject the request if the request originates from a user for which there does not exist a corresponding authorization on the resource.</t>

<t>Request payload definition:</t>

<figure><artwork><![CDATA[
root {
  request
}
]]></artwork></figure>

<t>Request message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "retrieve",
  "uri": "/resources/7f35c3eb-95d6-4558-1942e5f03094/authorizations",
  "requestId": "913d7ae3-8945-46ca-8ed1-2b287c1370ce"
})
]]></artwork></figure>

<t>The response message conforms to the basic response message structure and includes an array of KMS authorization object representations.</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response,
  authorizations
}
]]></artwork></figure>

<t>Response message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
{
  "status": 200,
  "requestId": "913d7ae3-8945-46ca-8ed1-2b287c1370ce",
  "authorizations": [
  {
    "uri": "/authorizations/79a39ed9-a8e5-4d1f-9ae2-e27857fc5901",
    "authId": "119a0582-2e2b-4c0c-ba6a-753d05171803",
    "resourceUri": "/resources/7f35c3eb-95d6-4558-1942e5f03094"
  },
  {
    "uri": "/authorizations/5aaca3eb-ca4c-47c9-b8e2-b20f47568b7b",
    "authId": "557ac05d-5751-43b4-a04b-e7eb1499ee0a",
    "resourceUri": "/resources/7f35c3eb-95d6-4558-1942e5f03094"
  }]
})
]]></artwork></figure>

<t>If successful, the KMS response to a retrieve bound keys request MUST have a status of 200.  In the case of a request failure, the KMS response status SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the failure condition.</t>

</section>
<section anchor="retrieve-authorizations-by-user" title="Retrieve Authorizations By User">

<t>To query an authorization for the specific user from a KMS resource object, any user currently authorized on the same resource object may issue retrieve authorization request for the specific user. The request message conforms to the basic request message structure, where the method is “retrieve”, and the URI is “/authorizations” followed by authorization id.</t>

<t>Request payload definition:</t>

<figure><artwork><![CDATA[
root {
  request
}
]]></artwork></figure>

<t>Request message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "retrieve",
  "uri": "/resources/a8c3c42f-5348-4289-83f0-d833d31ba93c/authorizations?authId=119a0582-2e2b-4c0c-ba6a-753d05171803",
  "requestId": "d4a741cd-0e16-4ff8-9a61-4a4b841d9e93"
})
]]></artwork></figure>

<t>If successful, the KMS response to a retrieve authorization for the specific user request MUST have a status of 200.  The response message conforms to the basic response message structure and includes an array of KMS authorization object representations. The array will be empty if the specified user is not authorized for the KMS resource object. The array will contain one single authorization entry for the specified user if that user is authorized for the KMS resource object.  In the case of a request failure, the KMS response status SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the failure condition.</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response,
  authorizations
}
]]></artwork></figure>

<t>Response message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
{
  "status": 200,
  "requestId": "d4a741cd-0e16-4ff8-9a61-4a4b841d9e93",
  "authorizations": [
  {
    "uri": "/authorizations/ef0a5291-49cb-413f-832b-b437bc542825",
    "authId": "119a0582-2e2b-4c0c-ba6a-753d05171803",
    "resourceUri": "/resources/a8c3c42f-5348-4289-83f0-d833d31ba93c"
  }]
})
]]></artwork></figure>

</section>
<section anchor="delete-authorization" title="Delete Authorization">

<t>To remove an authorization from a KMS resource object, any user currently authorized on the same resource object may issue a delete authorization request.  The request message conforms to the basic request message structure, where the method is “delete”, and the URI is either that of the authorization object to be deleted, or the URI of the collection of authorizations within a particular KMS resource object appended with an authId query parameter whose value matches that of the authorization object to be deleted.</t>

<t>Request payload definition:</t>

<figure><artwork><![CDATA[
root {
  request
}
]]></artwork></figure>

<t>Request message example, explicitly identifying the URI of the authorization object to be deleted:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "delete",
  "uri": "/authorizations/5aaca3eb-ca4c-47c9-b8e2-b20f47568b7b"
})
]]></artwork></figure>

<t>Request message example, implicitly identifying the authorization object to be deleted by the KMS resource object to which it belongs plus the value of its authId attribute:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "delete",
  "uri": "/resources/7f35c3eb-95d6-4558-1942e5f03094
         /authorizations?authId=557ac05d-5751-43b4-a04b-e7eb1499ee0a",
})
]]></artwork></figure>

<t>Note, in the example above, the URI attribute value is a continuous string of non-whitespace characters. Whitespace has been added here for readability.</t>

<t>The response message conforms to the basic response message structure, and includes a representation of the authorization object that was deleted.</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response,
  ?authorization
}
]]></artwork></figure>

<t>Response message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
{
  "status": 200,
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "authorization": {
    "uri": "/authorizations/5aaca3eb-ca4c-47c9-b8e2-b20f47568b7b",
    "authId": "557ac05d-5751-43b4-a04b-e7eb1499ee0a",
    "resourceUri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094"
  }
})
]]></artwork></figure>

<t>If successful, the KMS response to a delete authorization request MUST have a status of 200 if the authorization object representation is included, and 204 if not.  In the case of a request failure, the KMS response status SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the failure condition.</t>

</section>
<section anchor="ping" title="Ping">

<t>Ping is a simple request intended to provide an efficient means for verifying the integrity of the secure channel between client and KMS.  Ping MUST be implemented as a safe and idempotent operation that causes the server to do nothing more than return a basic response payload in reaction to the client request.  The method of a ping request is “update” and the uri is “/ping”.</t>

<t>Request payload definition:</t>

<figure><artwork><![CDATA[
root {
  request
}
]]></artwork></figure>

<t>Request message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "update",
  "uri": "/ping"
})
]]></artwork></figure>

<t>The response message conforms to the basic response message structure with no additional data.</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response
}
]]></artwork></figure>

<t>Response message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
{
  "status": 200,
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5"
})
]]></artwork></figure>

<t>If successful, the client may deduce that the KMS was able to successfully decrypt the received KMS request message, parse the contents, confirm the identity and authorization of the requesting client, and return a suitable response.</t>

</section>
</section>
</section>
<section anchor="mandatory-to-implement" title="Mandatory-to-Implement">

<t>Implementations MUST support the following JWK key types from <xref target="I-D.ietf-jose-json-web-algorithms"/>:</t>

<t><list style="symbols">
  <t>“RSA” for the KMS static public/private key</t>
  <t>“EC” for the Ephemeral Diffie Hellman exchange</t>
  <t>“oct” for all symmetric keys</t>
</list></t>

<t>Implementations MUST support “PS256” (RSASSA-PSS using SHA-256 and MGF1 with SHA-256) from <xref target="I-D.ietf-jose-json-web-algorithms"/> for signatures using the KMS static public/private key for <xref target="proto-ecdhe"/>.</t>

<t>Implementations MUST support JWK Elliptic Curve type “P-256” (NIST P-256 curve) from <xref target="I-D.ietf-jose-json-web-algorithms"/> for <xref target="proto-ecdhe"/>.</t>

<t>Implementations MUST support “RSA-OAEP” (RSAES OAEP using default parameters) from <xref target="I-D.ietf-jose-json-web-algorithms"/> for key encryption using the KMS static public/private key for <xref target="proto-ecdhe"/>.</t>

<t>Implementations MUST support “dir” (Direct Key Agreement Key Management Mode) from <xref target="I-D.ietf-jose-json-web-algorithms"/> for all operations other than <xref target="proto-ecdhe"/>.</t>

<t>Implementations MUST support “A256GCM” (AES GCM using 256 bit key) from <xref target="I-D.ietf-jose-json-web-algorithms"/> for content encryption for all operations other than <xref target="proto-ecdhe"/>.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Security considerations are discussed throughout this document.  Additional considerations may be added here as needed.</t>

</section>
<section anchor="appendix-a-acknowledgments" title="Appendix A. Acknowledgments">

<t>This specification is the work of several contributors.  In particular, the following individuals contributed ideas, feedback, and wording that influenced this specification:</t>

<t>Cullen Jennings, Matt Miller, Suhas Nandakumar, Jonathan Rosenberg</t>

</section>
<section anchor="appendix-b-document-history" title="Appendix B. Document History">

<t>-00</t>

<t><list style="symbols">
  <t>Initial draft.</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC5280;
&RFC5869;
&RFC7159;
&RFC6120;
&I-D.ietf-jose-json-web-encryption;
&I-D.ietf-jose-json-web-key;
&I-D.ietf-jose-json-web-signature;
&I-D.ietf-jose-json-web-algorithms;
&RFC4949;
&RFC6749;
&RFC6125;
&RFC2822;
&RFC3339;
&RFC7231;


    </references>

    <references title='Informative References'>

<reference anchor="OTR" target="https://otr.cypherpunks.ca/otr-wpes.pdf">
  <front>
    <title>Off-the-Record Communication, or, Why Not To Use PGP</title>
    <author initials="N." surname="Borisov" fullname="Nikita Borisov">
      <organization></organization>
    </author>
    <author initials="I." surname="Goldberg" fullname="Ian Goldberg">
      <organization></organization>
    </author>
    <author initials="E." surname="Brewer" fullname="Eric Brewer">
      <organization></organization>
    </author>
    <date year="2012"/>
  </front>
</reference>
&I-D.barnes-pervasive-problem;
&I-D.newton-json-content-rules;
&RFC5246;
&RFC4301;
&RFC5652;
&RFC4880;
&I-D.ietf-xmpp-posh;


    </references>



  </back>

<!-- ##markdown-source:
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
sVAlm2CA9xE7VVFjWq8Cit/Z17by9hovuy7JoAFVpqA10pm66tGJpCVn37M4
W19xGF1ImAOnJd45Xm5PGm7Jxa6WqbTTEhBTouln0VN4StVFedWvi75tJAZg
aPYUQzpULReLouQN2XRnKqFJBUGuFsZVurKipsrOYen1xbx6/x4O9Yto8+XZ
0WZgSgqamH9pmn1jESV8/OTYPe3a736dAhnW0SOdZXOq14LE9VzTGxhmy+53
rPDkF+6srtnm5ouz0WRvM9qCNZ6dHfVfnJ1JsbyzR0d9LPlJxVO+/WbIt0G+
3b4FDGhhWEtT4aWqbAPka0BBr5lcGWoR+/79zjW7wWM6ybJ0gUMeL0ssBIpJ
vJsv+rzLZ6fwNH1AW8hbfet93HJBePT950cnLxjCJ2cRfhAQmI53Ljf+1suh
bteurspHBO1mkpawia/TEmUkrBh5dF5qepw+wSWDa04fn4KkcuudIOZa3m6y
g4lx33ahR3C63x4/hcUivOEvAYvUr6VUo9uuTkiWD+vbLvqz6IyqZQKFO4aH
gdyVJtjE/hAHP1AIJ1Y1XVKzeomQLZbSPCAp4iUCIQxHbQxhCuE4JU1hTjkw
5ITWdERWq/RddLQTHcVv8uIy08k5ZU4jF4VpjAvCSsOIXpdF+QbJcoVtGnlW
Vi+LsmKp2FnLeg1a6rKWK/eeJiFPAU+YweKmKn7DxB0m4kw4TmWbgeqaU7nK
1tKA1B4DSwIp8086z+EdGOspaL3R0xS+hVWcLVFnfYbM4M1yjuv6E0CMTusl
nH4+1eV5AJKHO9HXAuPoUVohB9nY+D/9wYCLX5xKL4mkVLN6Z+P/A2g8ziUI
QgEA

-->

</rfc>

