<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC5280 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC5869 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5869.xml">
<!ENTITY RFC7159 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7159.xml">
<!ENTITY RFC6120 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6120.xml">
<!ENTITY I-D.ietf-jose-json-web-encryption SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-jose-json-web-encryption.xml">
<!ENTITY I-D.ietf-jose-json-web-key SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-jose-json-web-key.xml">
<!ENTITY I-D.ietf-jose-json-web-signature SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-jose-json-web-signature.xml">
<!ENTITY I-D.ietf-jose-json-web-algorithms SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-jose-json-web-algorithms.xml">
<!ENTITY RFC4949 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4949.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC6125 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6125.xml">
<!ENTITY RFC2822 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2822.xml">
<!ENTITY RFC3339 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3339.xml">
<!ENTITY RFC7231 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7231.xml">
<!ENTITY I-D.barnes-pervasive-problem SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.barnes-pervasive-problem.xml">
<!ENTITY I-D.newton-json-content-rules SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.newton-json-content-rules.xml">
<!ENTITY RFC5246 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY RFC4301 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4301.xml">
<!ENTITY RFC5652 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5652.xml">
<!ENTITY RFC4880 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4880.xml">
<!ENTITY I-D.ietf-xmpp-posh SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-xmpp-posh.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-abiggs-saag-key-management-service-02" category="info">

  <front>
    <title abbrev="key-management-service">Key Management Service Architecture</title>

    <author initials="A." surname="Biggs" fullname="Andrew Biggs">
      <organization>Cisco Systems</organization>
      <address>
        <email>adb@cisco.com</email>
      </address>
    </author>
    <author initials="S." surname="Cooley" fullname="Shaun Cooley">
      <organization>Cisco Systems</organization>
      <address>
        <email>shcooley@cisco.com</email>
      </address>
    </author>

    <date year="2018" month="August" day="01"/>

    
    
    

    <abstract>


<t>In the interest of addressing pervasive threats to the confidentiality and integrity of online communications identified by the Internet community <xref target="I-D.barnes-pervasive-problem"/> this specification introduces an open architecture for the establishment, management, and secure distribution of cryptographic keys for use in the end-to-end (E2E) encryption of online communications and shared content.  This architecture allows for the independent deployment of dedicated key management services in a manner that supports the adoption of third-party communications and data sharing services by individuals and organizations that require full and exclusive discretion over the confidentiality of their data.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Providers of cloud-based services commonly secure user data at the transport level using established protocols such as TLS <xref target="RFC5246"/> or IPSec <xref target="RFC4301"/>.  These protocols can be effective in protecting transmitted user data from third party tampering and eavesdropping; however, by themselves these protocols do not secure user data from abuses, negligence, or coerced behavior on the part of the cloud provider.  This is a concern for individuals and organizations that wish to take advantage of cloud-based communications and collaboration but cannot accept the risk of trusting cloud providers with unfettered access to the contents of their communications.</t>

<t>E2E encryption describes a category of solutions that can be employed to address this problem by establishing secure channels among clients.  To the extent that a user can trust their collaboration client software, E2E encryption mitigates exposure of user data to untrusted parties by ensuring that intermediaries never possess unencrypted user data or have access to the keying material necessary to decrypt it.</t>

<t>Existing E2E strategies such as ECS <xref target="RFC5652"/>, PGP <xref target="RFC4880"/>, and Off-the-Record Messaging <xref target="OTR"/> can be effective at securing two-party communications. However, E2E encryption for the growing domain of multiparty communications and online content sharing remains a generally unsolved problem to which these existing approaches do not readily adapt.  In particular, a core challenge exists in providing for the secure distribution and rotation of E2E encryption keys among an arbitrary and potentially dynamic set of communicating clients.  In cases where the communications to be secured are persistent or archived, the additional challenge exists for providing trusted long-term storage and retrieval of these keys.</t>

<t>Equally problematic is the paucity of E2E encryption options that satisfy common organizational obligations such as regulatory compliance and legal discovery.  Entities that must operate within such frameworks require mechanisms by which they (and they alone) may recover the keys used to secure their communications.  Existing E2E encryption solutions are not, by themselves, well suited for this purpose.</t>

<t>In the interest of addressing these challenges this document presents an architecture for the deployment of E2E encryption key management services (KMS).  In this architecture, a KMS provides to its users a means by which their communications clients may securely create, share, rotate, and store E2E encryption keying material.  It does so in a fashion that permits the decoupling of such services from the communications media, thereby permitting the former to reside under the direct control of the communicating parties or the organizations within which they do business.</t>

<section anchor="terminology" title="Terminology">

<t>This document uses the terminology from <xref target="I-D.ietf-jose-json-web-signature"/>, <xref target="I-D.ietf-jose-json-web-encryption"/>, <xref target="I-D.ietf-jose-json-web-key"/>, and <xref target="I-D.ietf-jose-json-web-algorithms"/> when discussing JOSE technologies.</t>

<t>This document makes use of the following terminology, and additionally adopts nomenclature defined in <xref target="I-D.barnes-pervasive-problem"/> for the purpose of describing aspects of pervasive attacks.</t>

<t>communications resource</t>

<t><list style='empty'>
  <t>A communications resource is any uniquely identifiable continuous data channel or discrete shared content that represents an exchange of personal communications between two or more users.</t>
</list></t>

<t>communications resource client</t>

<t><list style='empty'>
  <t>A communications resource client consumes communications resources on behalf of a user and, when deployed in conformance with the KMS architecture, consumes the services of KMS server(s) to facilitate the E2E encryption of those communications resources.</t>
</list></t>

<t>communications resource server</t>

<t><list style='empty'>
  <t>A communications resource server is a provider of services through which communications resources are made available.</t>
</list></t>

<t>cloud provider</t>

<t><list style='empty'>
  <t>An individual or organization responsible for, and in control of, one or more communications resource servers.</t>
</list></t>

<t>E2E encryption</t>

<t><list style='empty'>
  <t>Shorthand for end-to-end encryption, as defined in <xref target="RFC4949"/>, particularly as it applies to the establishment of confidentiality and integrity of communications resources.</t>
</list></t>

<t>KMS server</t>

<t><list style='empty'>
  <t>A key management service (KMS) server is responsible for creating, storing, and providing access to E2E encryption keying material by communications resource clients.</t>
</list></t>

<t>KMS protocol</t>

<t><list style='empty'>
  <t>The protocol through which communications resource clients interoperate with KMS servers.</t>
</list></t>

<t>KMS provider</t>

<t><list style='empty'>
  <t>An individual or organization responsible for, and in control of, a KMS server deployment.</t>
</list></t>

<t>KMS transport</t>

<t><list style='empty'>
  <t>Any service or protocol that provides the basic transport over which KMS protocol messages are exchanged.</t>
</list></t>

<t>resource client</t>

<t><list style='empty'>
  <t>See communications resource client.</t>
</list></t>

<t>resource server</t>

<t><list style='empty'>
  <t>See communications resource server.</t>
</list></t>

<t>trusted party</t>

<t><list style='empty'>
  <t>A trusted party is an individual or organization that is trusted by one or more communicating users to maintain the confidentiality and integrity of their communications resources.</t>
</list></t>

</section>
<section anchor="security-terms" title="Security Terms">

<t>Most security-related terms in this document are to be understood in the sense defined in <xref target="RFC4949"/>; such terms include, but are not limited to, “attack”, “authentication”, “authorization”, “certification authority”, “certification path”, “certificate”, “credential”, “identity”, “self-signed certificate”, “trust”, “trust anchor”, “trust chain”, “validate”, and “verify”.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>In this document, the key words “MUST”, “MUST NOT”, “REQUIRED”,
“SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”,
and “OPTIONAL” are to be interpreted as described in BCP 14, RFC 2119
<xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="architectural-overview" title="Architectural Overview">

<t>The architectural reference model for this specification is illustrated in <xref target="reference-model"/>.  Central to this model is the <spanx style="emph">communications resource server</spanx> which is presumed to be operated by a <spanx style="emph">cloud provider</spanx> for the purpose of offering some form of communications service.  The nature of this service is not prescribed by this specification and may take the form of any of a variety of communications or collaboration services including file sharing, messaging, and VoIP.  Consuming the services of the communications resource server are <spanx style="emph">communications resource clients</spanx> which may be supplied by the cloud provider or developed by third parties.</t>

<figure title="KMS Architecture Reference Model" anchor="reference-model"><artwork><![CDATA[
                         +-----------------+
                         | Communications  |
     +-------------------| Resource Server |-------------------+
     |                   | (Cloud Provider)|                   |
     |                   +-----------------+                   |
     |                                                         |
     |                                                         |
     |                   +-----------------+                   |
     |       +-----------|  KMS Transport  |-----------+       |
     |       |           +-----------------+           |       |
     |       |                    |                    |       |
     |       |   Untrusted        |                    |       | 
- - -|- - - -|- - - - - - - - - - | - - - - - - - - - -|- - - -|- - -
     |       |   Trusted          |                    |       |
     |       |                    |                    |       |
+-----------------+      +-----------------+      +-----------------+
| Communications  |      |    KMS Server   |      | Communications  |
| Resource Client |      |  (KMS Provider) |      | Resource Client |
+-----------------+      +-----------------+      +-----------------+
         |                                                 |
+-----------------+                               +-----------------+
|      Alice      |                               |       Bob       |
+-----------------+                               +-----------------+
]]></artwork></figure>

<t>In addition to the familiar elements described above, this model also includes a key management server, or <spanx style="emph">KMS</spanx>, operated by a <spanx style="emph">KMS provider</spanx>. The KMS server exposes an API through which clients may securely establish and share cryptographic keying material used for the E2E encryption of content that is transited through the cloud provider’s services.  This API is secured in such a way as to ensure these keys are visible to none but the KMS server itself and the clients authorized to consume the content they protect.  This highlights an important distinction between the KMS provider and the cloud provider: while the KMS provider is necessarily a <spanx style="emph">trusted party</spanx>, the cloud provider need not be.</t>

<t>It is an explicit objective of this specification to promote an ecosystem of providers of KMS implementations and KMS services that are distinct and independent of the cloud providers over whose services users communicate.  To that end, this specification seeks to standardize a KMS protocol through which clients and KMS servers interoperate.  This protocol provides for the establishment of a confidential and authenticated channel between each client and KMS server, and defines an API of request and response messages to be exchanged over this secure channel for the purpose of creating, retrieving, and exchanging keys.</t>

<t>While the KMS protocol constitutes a central focus of this specification, the means by which this protocol is transported is expressly out of scope.  This role may be readily addressed through either standards-based or proprietary protocols, and so we refer to this simply as the <spanx style="emph">KMS transport</spanx> for the remainder of this document.  Over this transport, the communication paths between clients and KMS server are encrypted using keys established through an authenticated ephemeral key agreement.  As such, the KMS transport provider need not be regarded as a trusted party, and in fact may be the cloud provider itself.</t>

<t>An important non-goal of this specification is the standardization of any aspect of the cloud provider’s services or the means by which clients utilize shared keys for the E2E encryption of data transiting those services.  By avoiding the application of constraints on the communications services and protocols we enable the use of this specification in the context of existing service deployments, both standards-based and proprietary.  It is similarly a non-goal of this specification to enable federation of secure communications between vendors of different cloud services, as that is the realm of standardized application protocols.  The scope of this specification is intended to be narrowly focused on the task of separating E2E encryption key management from the communications services they secure, thereby facilitating the broadest possible adoption of secure communications though existing services.</t>

</section>
<section anchor="use-cases" title="Use Cases">

<t>The use cases described in this section are non-normative examples meant to illustrate how the KMS architecture may be deployed to provide E2E encryption of different types of communications resources.  These use cases differ in detail, but generally follow a common logical sequence as given below.</t>

<t>Note that all requests to the KMS server are via the KMS transport which, for clarity, has been omitted from the sequence diagrams included in this section.</t>

<figure title="Nominal Use Case" anchor="nominal-usecase"><artwork><![CDATA[
  Resource          Resource          Resource            KMS
  Client B          Client A           Server            Server
     |                 |                 |                 |
     |                 |                 |       (1)       |
     |                 |-----------------|---------------->|
     |                 |       (2)       |                 |
     |                 |---------------->|                 |
     |                 |                 |       (3)       |
     |                 |-----------------|---------------->|
     |                 |       (4)       |                 |
     |-----------------|---------------->|                 |
     |                 |                 |                 |
 (5) |                 |                 |                 |
     |                 |                 |       (6)       |
     |-----------------|-----------------|---------------->|
     |                 |                 |                 |
 (7) |                 |                 |                 |
     |                 |                 |                 |

]]></artwork></figure>

<t><list style="numbers">
  <t>Client A requests the generation of a new unbound key from the KMS.</t>
  <t>Client A encrypts a communications resource using the unbound KMS key and shares it via a resource server.</t>
  <t>Client A requests the creation of a new KMS resource object (KRO) to represent the communications resource.  Client A also instructs the KMS to bind the KMS key used in step (2) to the new KRO and to authorize user B to retrieve keys bound to the KRO.</t>
  <t>Client B accesses the communications resource shared by client A and receives the encrypted data.</t>
  <t>Client B obtains, through some means not defined by this specification, the URL of the KMS key used to encrypt the communications resource.</t>
  <t>Client B requests the KMS key from the KMS server.  The KMS server, recognizing user B as authorized on the KRO to which the key is bound, returns the KMS key.</t>
  <t>Client B decrypts the communications resource using the KMS key.</t>
</list></t>

<section anchor="securing-an-http-file-sharing-service" title="Securing an HTTP File Sharing Service">

<t>Let A be a user that wishes to share a file with users B and C through some HTTP based file sharing service.  In the context of the KMS architecture we may regard the file sharing provider’s HTTP API as the resource server and the users’ HTTP clients as the resource clients.</t>

<t>For this scenario we also assume that the file sharing service is trusted by user A with the role of providing a file sharing service but is not necessarily trusted to adequately protect the confidentiality of the file contents.  User A’s concerns may then be addressed through the introduction of an HTTP based KMS transport (not shown) and KMS server deployed by an entity that A regards as a trusted party.</t>

<figure title="File Sharing Use Case" anchor="fileshare-usecase"><artwork><![CDATA[
     HTTP           HTTP           HTTP       HTTP File         KMS
   Client C       Client B       Client A    Share Server      Server
      |              |              |              |             |
      |              |              |              |     (1)     |
      |              |              |--------------|------------>|
      |              |              |      (2)     |             |
      |              |              |------------->|             |
      |      (3)     |      (3)     |              |             |
      |<-------------|<-------------|--------------|             |
      |              |              |              |     (4)     |
      |              |              |--------------|------------>|
      |              |              |      (5)     |             |
      |              |--------------|------------->|             |
      |              |              |              |     (6)     |
      |              |--------------|--------------|------------>|
      |              |              |              |             |
      |          (7) |              |              |             |
      |              |              |              |             |
  (8) |              |              |              |             |
      |              |              |              |             |
]]></artwork></figure>

<t>This sequence begins with the assumption that each client has, at some point, already established a secure channel to the KMS via authenticated key agreement.</t>

<t><list style="numbers">
  <t>Client A requests from the KMS some number of unbound KMS keys.</t>
  <t>Client A selects an unbound key from the set of keys obtained step (1), encrypts the file to be shared, and posts the encrypted content to the file sharing service.  The file sharing service responds with a URL that uniquely identifies the shared file.</t>
  <t>Clients B and C learn of the newly shared file from the file sharing service (the mechanism by which this occurs is out of scope for this specification).</t>
  <t>Client A requests the creation of a KMS resource object (KRO) on the KMS to represent the shared file.  In this message the client also requests that the key from step (2) be bound to the newly created KRO and that the users of clients B and C be authorized to retrieve keys bound to the KRO.</t>
  <t>Client B retrieves the shared file from the file sharing service.</t>
  <t>Client B requests from the KMS all keys bound to the KRO associated with the shared file’s URL.  Recognizing client B as authorized on the KRO, the KMS returns the key bound to the KRO by client A in step (4).</t>
  <t>Client B decrypts the shared file using the key obtained in step (6).</t>
  <t>Client C performs steps (5) through (7) in the same fashion as client B.</t>
</list></t>

<t>It is worth noting that a race condition does exist where step (6) could occur before step (4) completes.  This will result in a client being temporarily denied access to the key used to encrypt the shared file.</t>

</section>
<section anchor="securing-an-xmpp-multi-user-chat" title="Securing an XMPP Multi-User Chat">

<t>Let A, B and C be users that wish to engage in secure chat through an existing XMPP <xref target="RFC6120"/> multi-user chat (MUC) room.  In the context of the KMS architecture we may regard the XMPP MUC service as the resource server, the users’ XMPP clients as the resource clients, and the XMPP service itself (not shown) as the KMS transport.</t>

<figure title="Multi-User Chat Use Case" anchor="muc-usecase"><artwork><![CDATA[
     XMPP           XMPP           XMPP         XMPP MUC        KMS
   Client C       Client B       Client A        Server        Server
      |              |              |              |             |
      |              |              |              |     (1)     |
      |              |              |--------------|------------>|
      |              |              |              |     (2)     |
      |              |              |--------------|------------>|
      |              |              |      (3)     |             |
      |              |              |------------->|             |
      |      (4)     |      (4)     |              |             |
      |<-------------|<-------------|--------------|             |
      |              |              |              |     (5)     |
      |              |--------------|--------------|------------>|
      |              |              |              |             |
      |          (6) |              |              |             |
      |              |              |              |             |
  (7) |              |              |              |             |
]]></artwork></figure>

<t>This sequence begins with the assumption that a MUC room already exists on the MUC server and that each client has already established a secure channel to the KMS via authenticated key agreement.  All messages are transmitted over XMPP.</t>

<t><list style="numbers">
  <t>Client A requests from the KMS some number of unbound KMS keys.  Client A selects one of these keys for encrypting MUC room messages.</t>
  <t>Client A requests the creation of a KMS resource object (KRO) on the KMS to represent the MUC room.  In this message the client also requests that the key selected in step (1) be bound to the newly created KRO and that the users of clients B and C be authorized to retrieve keys bound to the KRO.</t>
  <t>Client A encrypts a message with the key selected in step (1) and sends it to the MUC room.</t>
  <t>The MUC service delivers client A’s encrypted message to clients B and C.</t>
  <t>Client B requests from the KMS all keys bound to the KRO associated with the MUC room’s URI.  Recognizing client B as authorized on the KRO, the KMS returns the key bound to the KRO by client A in step (2).</t>
  <t>Client B decrypts the shared file using the key selected in step (1).</t>
  <t>Client C performs steps (5) and (6) in the same fashion as client B.</t>
</list></t>

</section>
<section anchor="kms-to-kms-key-federation" title="KMS to KMS Key Federation">

<t>This use case illustrates two KMS instances federating keys associated with a resource.  As KMS servers are deployed to serve groups of users it is inevitable that users will want to share resources across groups or organizations.  This cross-organization sharing of keys leads to several problems.  First, each user is only known to and only knows of one logical KMS.  Second, each organization might have very different archiving requirements due to differing legal compliance regulations due to jurisdiction or industry differences.  Lastly, one or both of the users might be employees of enterprises that need to be able to respond to legal discovery requests.  To address these issues, KMS servers may federate in such a way as to allow for limited copying of keys from one KMS to another.  This permits each KMS’ owning organization the ability to control the ongoing policy regarding access to keys for which their respective users are authorized.</t>

<t>Let Alice@DomainA and Bob@DomainB be users of a common file sharing service and who happen to use different KMS servers to secure their communications.  Assume then that Alice wishes to share a file with Bob and therefore relies on KMS server federation to facilitate the key exchange.</t>

<figure title="File Sharing with KMS Federation Use Case" anchor="fed-usecase"><artwork><![CDATA[
HTTP Client    HTTP Client     HTTP File      KMS Server   KMS Server
Bob@DomainB   Alice@DomainA   Share Server     DomainA       DomainB
     |              |              |      (1)     |             |
     |              |--------------|------------->|             |
     |              |      (2)     |              |             |
     |              |------------->|              |             |
     |      (3)     |              |              |             |
     |<-------------|--------------|              |             |
     |              |              |      (4)     |             |
     |              |--------------|------------->|             |
     |              |      (5)     |              |             |
     |--------------|------------->|              |             |
     |              |              |              |     (6)     |
     |--------------|--------------|--------------|------------>|
     |              |              |              |     (7)     |
     |              |              |              |<------------|
     |              |              |              |     (8)     |
     |              |              |              |<------------|
     |              |              |              |             |
     |              |              |              |             | (9)
     |              |              |              |             |
(10) |              |              |              |             |
     |              |              |              |             |
]]></artwork></figure>

<t>This sequence begins with the assumption that each client has, at some point, already established a secure channel to their respective KMS via authenticated key agreement.</t>

<t><list style="numbers">
  <t>Alice@DomainA requests from the DomainA KMS some number of unbound KMS keys.  Each KMS key is uniquely identified by a URL.</t>
  <t>Alice@DomainA selects a key from the set of KMS keys obtained in step (1), uses that key to encrypt the file to be shared, and posts the encrypted content to the file sharing service.  The file sharing service responds with a URL that uniquely identifies the shared file.</t>
  <t>Bob@DomainB is notified of the newly shared file URL and corresponding KMS key URL through a notification from the file sharing service (or potentially some other means, such an an email from Alice).</t>
  <t>Alice@DomainA requests the creation of a KMS resource object (KRO) on the DomainA KMS to represent the shared file.  In this message Alice also requests that the KMS key from step (2) be bound to the newly created KRO and that the user Bob@DomainB be authorized to retrieve KMS keys bound to the KRO.</t>
  <t>Bob@DomainB retrieves the shared file from the file sharing service.</t>
  <t>Using the KMS key URL obtained in step (3), Bob@DomainB requests the KMS key from the DomainB KMS.</t>
  <t>The DomainB KMS recognizes the KMS key URL as actually hosted by the DomainA KMS.  The DomainB KMS establishes a secure and mutually authenticated channel with the DomainA KMS via the KMS transport.</t>
  <t>The DomainB KMS requests from the DomainA KMS the KRO object to which the KMS key is bound, along with all DomainB user authorizations and other KMS keys that have been bound to that KRO.  The DomainA KMS recognizes that the DomainB KMS is authorized to retrieve all KMS keys for which users in the DomainB domain have been authorized.  It then recognizes that at least one DomainB user (Bob) has been authorized on the KRO created in step (4).  The DomainA KMS therefore decides the DomainB KMS is authorized to make this request and returns the requested information.</t>
  <t>Using the information received from the DomainA KMS, the DomainB KMS verifies that Bob@DomainB is authorized on the KRO, and satisfies the request from step (6) by returning the KMS key to Bob@DomainB.</t>
  <t>Client Bob@DomainB decrypts the shared file using the key obtained in step (9).</t>
</list></t>

<t>Note that in step (9) the DomainB KMS is enforcing authorization policy for the KRO hosted on the DomainA KMS as it pertains to DomainB users.  This is a necessary consequence of KMS federation, where the act of authorizing access to a KRO by a user residing in a federated domain engenders an implicit trust of the KMS server that controls the federated domain.  For that reason, a KMS provider should restrict federation of its KMS servers to domains that the KMS provider regards as trusted.</t>

</section>
</section>
<section anchor="kms-protocol" title="KMS Protocol">

<t>The KMS protocol is composed of a message oriented request and response API and a secure channel over which those messages are exchanged.  The API provides clients with the ability to generate E2E encryption keys, associate those keys with communications resources, and explicitly manage access authorizations on those keys.  The secure channel provides a mutually authenticated and E2E encrypted channel over which the clients and KMS server may exchange API messages securely.  The API and secure channel are described in detail through the remainder of this section.</t>

<section anchor="secure-channel" title="Secure Channel">

<t>The secure channel is an encrypted and mutually authenticated communication path between each client and the KMS server.  It transits the KMS transport which, in the context of this document, represents any service or protocol that may be utilized for the relaying of KMS API request and response messages.  This specification presumes the KMS transport to be untrusted.</t>

<figure title="Establishment of a Secure Channel" anchor="establish-secure-channel"><artwork><![CDATA[
                          (3) Secure Channel
        +===================================================+
        V                                                   V
+-----------------+  (2)   +---------------+   (1)  +---------------+
| Resource Client |<------>| KMS Transport |<------>|   KMS Server  |
+-----------------+        +---------------+        +---------------+
                      |                         |
     Trusted          |        Untrusted        |        Trusted
]]></artwork></figure>

<t>At a high level, the communication path between a resource client and KMS is established as follows.</t>

<t><list style="numbers">
  <t>The KMS actively connects to the KMS transport.  The protocol used for this connection is out of scope for this document, however it MUST support the asynchronous flow of encrypted KMS request and response messages between the KMS and KMS transport.</t>
  <t>A resource client connects to the KMS transport.  The protocol used for this connection is out of scope for this document, however it MUST support the flow of encrypted KMS request and response messages between the resource client and the KMS transport.</t>
  <t>Through an elliptic curve Diffie-Helman key exchange, augmented by server and client authentication, the resource client and KMS establish a shared secret and derived ephemeral key.  This is discussed in greater detail in <xref target="proto-ecdhe"/>.</t>
</list></t>

<t>On successful mutual authentication and ephemeral key agreement, the resource client and KMS communicate through the exchange of sequenced request and response messages encrypted using the ephemeral key.</t>

</section>
<section anchor="proto-user-identity" title="User Identity">

<t>Central to the KMS server’s role as a key store is its ability to restrict access to stored keying material to only authorized users.  This requires robust user authentication and a means for the unambiguous and unique identification of each user.</t>

<t>Conforming KMS architecture deployments MUST rely on an identity provider that supports the generation of OAuth 2.0 <xref target="RFC6749"/> access tokens.  The KMS server MUST rely on same identity provider for the purpose of validating access tokens received from the client.  Access tokens used by clients to demonstrate identity and authorization for access to KMS resources MUST NOT be used for any other service.  Any exposure of a KMS recognized access token to third parties (such as providers of other services) jeopardizes the security of all KMS keys for which the user whose identity is represented by the token is authorized.</t>

<t>The identity provider on which the KMS server relies MAY be the same identity provider as relied upon by the resource server(s) whose communications resources are encrypted with keys managed by the KMS server.  Note, however, the reliable authentication and authorization of clients to the KMS server is critical to the security of the KMS keys it holds.  The identity provider on which the KMS relies must therefore necessarily be regarded as a trusted party within the context of the KMS architecture.</t>

<t>Access tokens MUST be conveyed to the KMS server as part of the payload of encrypted KMS API requests as described in <xref target="proto-basic-request-payload"/> and MUST NOT be conveyed in any other manner.</t>

</section>
<section anchor="kms-identity" title="KMS Identity">

<t>Given the untrusted nature of the KMS transport by both the KMS and clients, it is critical for clients to be able to verify the identity of their KMS and ensure that no MITM attacks are carried out on client to KMS or KMS to client communications.  Therefore, the KMS MUST make use of at least one PKIX certificate <xref target="RFC5280"/> and clients MUST validate the PKIX certificate presented by the KMS through the comparison of the certificate’s common name (CN) or subject alternative name (SAN) <xref target="RFC6125"/> fields to the Internet domain portion of the user’s Addr-spec <xref target="RFC2822"/> formatted unique identifier using the procedures defined in section 6 of <xref target="RFC6125"/>.  An acceptable alternative to direct CN or SAN validation is defined in <xref target="I-D.ietf-xmpp-posh"/>.</t>

<t>PKIX certificates presented by the KMS can be issued by either a public or private certification authority with the stipulation that clients MUST be able to validate the KMS’s entire certificate path through the pre-established trust of the root certificate used to anchor the certificate path.  The mechanism for establishing trust of the root certificate is out of scope for this specification, but it is usually carried out through pre-installed trusted root certificates on various operating systems for public certification authorities or through enterprise endpoint management solutions or manual installation tasks for private certification authorities.</t>

</section>
<section anchor="object-types" title="Object Types">

<t>The KMS protocol defines three object types: resources, keys, and authorizations.  It is through the creation and manipulation of instances of these object types that clients interact with the KMS.</t>

<t>Resource</t>

<t><list style='empty'>
  <t>A resource is an object that represents, within the KMS object model, a communications resource as defined in <xref target="terminology"/>.  Keys and user authorizations are associated (bound) to the resource object as a means of representing their logical association with that communications resource.</t>
</list></t>

<t>Key</t>

<t><list style='empty'>
  <t>A key is an object representing symmetric keying material generated and made available to authorized clients by the KMS.  A key may exist in one of two states: “bound”, and “unbound”.  An unbound key is not associated with any resource, whereas a bound key is associated with exactly one resource.</t>
</list></t>

<t>Authorization</t>

<t><list style='empty'>
  <t>An authorization is the association of a user with a particular resource.  When such an association exists between a user and a resource this implies that the user is entitled to retrieve any key that is bound to that resource, and to add or remove authorizations for other users on the same resource.</t>
</list></t>

<t>The KMS protocol is composed from representations of these fundamental object types.  These representations are defined in the following sections.</t>

<section anchor="proto-kms-key-object" title="KMS Key Objects">

<t>The JSON representations for KMS key objects is defined as follows using JSON content rules <xref target="I-D.newton-json-content-rules"/>.</t>

<figure><artwork><![CDATA[
jwk : ; see [JWK]

kmsUri (
  "uri" : uri relative
)

keyRep {
  kmsUri,
  "jwk" : jwk,
  "userId" : string,
  "clientId" : string,
  "createDate" : date-time,
  "expirationDate" : date-time,
  ?"resourceUri" : kmsUri,
  ?"bindDate" : date-time
}

key (
  "key" : keyRep
)

keys (
  "keys" : [ *keyRep ]
)

keyUris (
  "keyUris" : [ *kmsUri ]
)
]]></artwork></figure>

<t>The attributes of a KMS key object are defined as follows.</t>

<t>uri</t>

<t><list style='empty'>
  <t>A standard definition for KMS object identifiers.</t>
</list></t>

<t>jwk</t>

<t><list style='empty'>
  <t>Symmetric keying material represented as a JWK object (see <xref target="I-D.ietf-jose-json-web-key"/>).</t>
</list></t>

<t>userId</t>

<t><list style='empty'>
  <t>The authenticated unique identifier of the user that created the key.</t>
</list></t>

<t>clientId</t>

<t><list style='empty'>
  <t>An opaque unique identifier provided by the client that created the key.</t>
</list></t>

<t>createDate</t>

<t><list style='empty'>
  <t>The point in time when the key was created, in <xref target="RFC3339"/> date-time format.</t>
</list></t>

<t>expirationDate</t>

<t><list style='empty'>
  <t>The point in time after which the key may no longer be bound (if unbound) or may no longer be used for encrypting data (if bound or an ephemeral key).</t>
</list></t>

<t>resourceUri</t>

<t><list style='empty'>
  <t>The uri of the KMS resource object to which the key is bound.</t>
</list></t>

<t>bindDate</t>

<t><list style='empty'>
  <t>The point in time when the key was bound, in <xref target="RFC3339"/> date-time format.</t>
</list></t>

</section>
<section anchor="proto-kms-authorization-object" title="KMS Authorization Objects">

<t>The JSON representations for KMS authorization objects is defined as follows using JSON content rules with references to rules defined in previous sections.</t>

<figure><artwork><![CDATA[
authorizationRep {
  kmsUri,
  ?"authId" : string,
  ?"bearer" : string,
  "createDate" : date-time,
  "resourceUri" : kmsUri,
  ?"roleUri" : Uri
}

authorization (
  "authorization" : authorizationRep
)

authorizations (
  "authorizations" : [ *authorizationRep ]
)

authorizationUris (
  "authorizationUris" : [ *kmsUri ]
)
]]></artwork></figure>

<t>The attributes of a KMS authorization object are defined as follows.</t>

<t>uri</t>

<t><list style='empty'>
  <t>A standard definition for KMS object identifiers.</t>
</list></t>

<t>authId</t>

<t><list style='empty'>
  <t>A unique identifier of the authorized entity.  The exact semantics of this attribute are out of scope for this document, however it is RECOMMENDED that an implementation regard the value of this attribute as mapped to either an individual identity or a grouping of identities as recognized by the identity provider employed by the KMS.  The value of this attribute may also be the URI of a KRO, in which case all authorizations on the indicated KRO will be regarded by the KMS as also applying to the KRO to which this authorization object belongs. Either authId or bearer needs to be present, but not both.</t>
</list></t>

<t>bearer</t>

<t><list style='empty'>
  <t>A KMS generated JWT bearer token for a generated anonymous authorization that identifies the issuing KMS, the anonymous authorization ID, the KRO to which it applies, and a TTL that matches the expiration of the authorization itself. Either authId or bearer needs to be present, but not both.</t>
</list></t>

<t>createDate</t>

<t><list style='empty'>
  <t>The point in time when the authorization was created, in <xref target="RFC3339"/> date-time format.</t>
</list></t>

<t>resourceUri</t>

<t><list style='empty'>
  <t>The object identifier of the resource to which the authorization applies.</t>
</list></t>

<t>roleUri</t>

<t><list style='empty'>
  <t>An identifier in the form of Uri to specify the role of the authorization, could be participant, cloudAgent, orgAgent, etc. by default without the roleUri explicitly specified, it is participant role.</t>
</list></t>

<t>Note, with respect to this specification user identifiers are opaque, however they MUST map to unique identifiers provided as part of user authentication.</t>

</section>
<section anchor="proto-kms-resource-object" title="KMS Resource Objects (KRO)">

<t>The JSON representation for KMS resource objects is defined as follows using JSON content rules with references to rules defined in previous sections.</t>

<figure><artwork><![CDATA[
resourceRep {
  kmsUri,
  keys / keyUris,
  authorizations / authorizationUris,
  ttl
}

resource (
  "resource" : resourceRep
)

resources (
  "resources" : [ *resourceRep ]
)

resourceUris (
  "resourceUris" : [ *kmsUri ]
)
]]></artwork></figure>

<t>The attributes of a KMS resource object are defined as follows.</t>

<t>uri</t>

<t><list style='empty'>
  <t>A standard definition for KMS object identifiers.</t>
</list></t>

<t>keys</t>

<t><list style='empty'>
  <t>An array of key object representations, one for each key bound to the resource.</t>
</list></t>

<t>keyUris</t>

<t><list style='empty'>
  <t>An array of key object identifiers, one for each key bound to the resource.  Only one of either keys or keyUris may be present in a resource object representation.</t>
</list></t>

<t>authorizations</t>

<t><list style='empty'>
  <t>An array of authorization object representations, one for each authorization on the resource.</t>
</list></t>

<t>authorizationUris</t>

<t><list style='empty'>
  <t>An array of authorization object identifiers, one for each authorization on the resource.  Only one of either authorizations or authorizationUris may be present in a resource object representation.</t>
</list></t>

</section>
</section>
<section anchor="request-types" title="Request Types">

<t>The KMS protocol defines four types of requests: create, retrieve, update, delete, each of which may be applied to one of the three KMS object types.  Note that not all object types support all requests types.  A KMS need only support those combinations of request type and object type explicitly defined in this document.</t>

<t>Create</t>

<t><list style='empty'>
  <t>A create operation acts upon an object type, creating one or more new instances of that object type.</t>
</list></t>

<t>Retrieve</t>

<t><list style='empty'>
  <t>A retrieve operation acts upon an object or object type, returning in the response a representation of one or more object instances.</t>
</list></t>

<t>Update</t>

<t><list style='empty'>
  <t>An update operation acts upon an object, altering mutable properties of that object.</t>
</list></t>

<t>Delete</t>

<t><list style='empty'>
  <t>A delete operation acts upon an object, removing that object from the KMS.</t>
</list></t>

</section>
<section anchor="message-structure" title="Message Structure">

<t>Every KMS request and response message is composed of a JSON <xref target="RFC7159"/> formatted payload encapsulated within either a JWE <xref target="I-D.ietf-jose-json-web-encryption"/> or JWS <xref target="I-D.ietf-jose-json-web-signature"/> object.  These messages may be divided into three types.</t>

<t>Common Messages</t>

<t><list style='empty'>
  <t>Common messages include all those which do not meet the definition of either key agreement message or error message.  Common messages are encrypted as JWE objects using the shared ephemeral key established during initial key agreement between the client and KMS (see <xref target="proto-ecdhe"/>).  The value of the JWE header “kid” attribute of a common message MUST match that of the KMS ephemeral key object URI attribute established during initial key agreement.</t>
</list></t>

<t>Ephemeral Key Agreement Messages</t>

<t><list style='empty'>
  <t>Ephemeral key agreement messages are those exchanged between the client and KMS for the purpose of establishing a new shared ephemeral key (see <xref target="proto-ecdhe"/>).  Key agreement request payloads are encrypted as JWE objects using the authenticated and validated static public key of the KMS.  Key agreement response payloads are signed as JWS objects using the static private key of the KMS.  The value of the JWE or JWS header “kid” attribute of an ephemeral key agreement message MUST be a well known key identifier for the KMS static public key.</t>
</list></t>

<t>Error Messages</t>

<t><list style='empty'>
  <t>Error messages are those originated by the KMS to indicate a failed request.  Error messages are composed in the same fashion as common messages; however, in the event that the KMS does not recognize the ephemeral key used in the request, or that key is determined to have expired, the KMS MUST respond with an unencrypted message composed as a JWS, with a payload as described in <xref target="proto-error"/>, and signed using the KMS server’s static public key.</t>
</list></t>

<t>The basic JSON representations for the request and response payloads are defined in the following sections.</t>

<section anchor="proto-basic-request-payload" title="Basic Request Payload">

<t>The basic JSON representation for KMS request message payloads is defined as follows using JSON content rules with references to rules defined in previous sections.</t>

<figure><artwork><![CDATA[
requestId (
  "requestId" : integer
)

credential {
  "userId": ?string
  "bearer": string / "jwk": jwk
}

client {
  "clientId": string,
  "credential": credential
)

method: string /create|retrieve|update|delete/

request (
  "client" : client,
  "method" : method,
  kmsUri,
  requestId
)
]]></artwork></figure>

<t>The attributes of a KMS request message payload are defined as follows.</t>

<t>requestId</t>

<t><list style='empty'>
  <t>A string selected by the client and provided in each request to uniquely identify the request.  The string is treated opaquely by the server and returned verbatim in the associated response.</t>
</list></t>

<t>userId</t>

<t><list style='empty'>
  <t>The unique identifier of the user making the request.  This field is optional, and MUST be disregarded if the requesting user’s identity can be securely derived from either the bearer token or jwk.</t>
</list></t>

<t>bearer</t>

<t><list style='empty'>
  <t>An <xref target="RFC6749"/> access token issued by the client’s identity provider and validated by the KMS in cooperation with the identity provider.  See <xref target="proto-user-identity"/>.</t>
</list></t>

<t>jwk</t>

<t><list style='empty'>
  <t>A JWK object, in JSON format as defined in <xref target="I-D.ietf-jose-json-web-key"/>, containing the public key of the client (presumably a server).  This JWK MUST contain an x5c header with a certificate chain that may be used to positively validate the public key.</t>
</list></t>

<t>clientId</t>

<t><list style='empty'>
  <t>An opaque unique identifier provided by the client (not used for authentication, only to assist multiple clients of a single user in differentiating between their respective unbound keys).</t>
</list></t>

<t>method</t>

<t><list style='empty'>
  <t>Indicates the request type: create, retrieve, update, or delete.</t>
</list></t>

<t>uri</t>

<t><list style='empty'>
  <t>The KMS object or object type to which the request applies.</t>
</list></t>

<t>The JSON content rules above are used in conjunction with additional request type specific rules, defined later in this document, to produce the full request payload definition for each KMS operation.</t>

</section>
<section anchor="proto-basic-response-payload" title="Basic Response Payload">

<t>The basic JSON representation for KMS request message payloads is defined as follows using JSON content rules with references to rules defined in previous sections.</t>

<figure><artwork><![CDATA[
response (
  "status" : integer,
  ?"reason" : string,
  requestId
)
]]></artwork></figure>

<t>The attributes of a KMS request message payload are defined as follows.</t>

<t>status</t>

<t><list style='empty'>
  <t>Indicates the success or failure of the request.  The value returned in a response status attribute SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the success or failure condition of the KMS request.</t>
</list></t>

<t>reason</t>

<t><list style='empty'>
  <t>An optional natural language string to describe the response status in terms that are useful for tracing and troubleshooting the API.</t>
</list></t>

<t>requestId</t>

<t><list style='empty'>
  <t>An echo of the requestId provided in the request.</t>
</list></t>

<t>The JSON content rules above are used in conjunction with additional response type specific rules, defined later in this document, to produce the full response payload definition for each KMS operation.</t>

</section>
<section anchor="proto-error" title="Error Response Payload">

<t>The JSON representation for KMS error response message payloads is defined as follows using JSON content rules with references to rules defined in previous sections.</t>

<t>Error response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response
}
]]></artwork></figure>

<t>Error response message example:</t>

<figure><artwork><![CDATA[
JWS(K_kms_priv, {
  "status": 403,
  "reason": "The ephemeral key used in the request has expired.",
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5"
})
]]></artwork></figure>

</section>
</section>
<section anchor="requests" title="Requests">

<t>The following sections provide detailed descriptions for each of the request and response operations that may occur between a resource client and the KMS.</t>

<section anchor="proto-ecdhe" title="Create Ephemeral Key">

<t>The first operation between a client and KMS MUST be the establishment of a shared secret and derived ephemeral key.  This is necessary as all other requests and responses are encrypted with the ephemeral key.</t>

<t>The client request for creating an ephemeral key conforms to the basic request message payload, where the method is “create” and the uri is “/ecdhe”.  In addition to the basic payload, the client provides a jwk attribute for which the value is a JWK object <xref target="I-D.ietf-jose-json-web-key"/> containing the public part of an EC key pair generated by the client.  Unlike a basic request message, however, the request payload is encrypted as the content of a JWE <xref target="I-D.ietf-jose-json-web-key"/> object secured with the static public key of the KMS server (K_kms_pub) as obtained from the server’s validated PKIX certificate <xref target="RFC5280"/>.</t>

<t>Note, the client MUST generate a new EC key pair for every create ephemeral key request sent to the KMS server.</t>

<t>Request payload definition:</t>

<figure><artwork><![CDATA[
root {
  request,
  jwk
}
]]></artwork></figure>

<t>Request message example:</t>

<figure><artwork><![CDATA[
JWE(K_kms_pub, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }, 
  "method": "create",
  "uri": "/ecdhe",
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "jwk" : {
    "kty": "EC",
    "crv": "P-256",
    "x": "VoFkf6Wk5kDQ1ob6csBmiMPHU8jALwdtaap35Fsj20M",
    "y": "XymwN6u2PmsKbIPy5iij6qZ-mIyej5dvZWB_75lnRgQ"
  }
})
]]></artwork></figure>

<t>On receiving the ephemeral key creation request, the KMS server MUST verify the credential provided in the request.  If a bearer token is provided, the KMS MUST validate the token in cooperation with the identity provider.  If a jwk is provided, the KMS MUST validate the included PKIX certificate chain against the KMS server’s trust root.  In either case, the identity of the requesting client MUST be authenticated and verified to correspond to either an authorized user of the KMS or an authorized trusted service.  If verification fails, the KMS MUST NOT use the server response to continue with key agreement.</t>

<t>Upon successful authentication and authorization of the request, the KMS responds by generating its own EC key pair using the same curve as indicated in the “crv” attribute of the request message JWK.  The KMS server returns the public part of this key pair to the resource client in the form of a KMS key object within the response payload.  The KMS also generates and includes within the response payload a new key uri to be regarded by both client and KMS as the key identifier of the agreed upon ephemeral key.  The response payload is returned to the resource client as the content of a JWS <xref target="I-D.ietf-jose-json-web-signature"/> signed using the static private key of the KMS server (K_kms_priv).</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response,
  key
}
]]></artwork></figure>

<t>Response message example:</t>

<figure><artwork><![CDATA[
JWS(K_kms_priv, {
  "status": 201,
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "key": {
    "uri": "/ecdhe/ea9f3858-1240-4328-ae22-a15f6072306f",
    "jwk" : {
      "kty": "EC",
      "crv": "P-256",
      "x": "8mdasnEZac2LWxMwKExikKU5LLacLQlcOt7A6n1ZGUC",
      "y": "lxs7ln5LtZUE_GE7yzc6BZOwBxtOftdsr8HVh-14ksS"
    },
    "userId": "842e2d82-7e71-4040-8eb9-d977fe888807",
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "createDate": "2014-10-09T15:54:48Z",
    "expirationDate": "2014-10-09T16:54:48Z"
  }
})
]]></artwork></figure>

<t>If successful, the KMS response to a create ephemeral key request MUST have a status of 201.  In the case of a request failure, the KMS response status SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the failure condition.  In addition, the ephemeral key SHOULD have the createDate assigned as the current time and an expirationDate assigned as the latest point in time before which the key may be used for encrypting messages (both in <xref target="RFC3339"/> date-time format).</t>

<t>On receiving the ephemeral key creation response, the resource client MUST verify the received JWS against the KMS server’s validated static public key.  If verification fails, the client MUST NOT use the server response to continue with key agreement.</t>

<t>To generate the shared secret, both resource client and KMS server use ECDH shared secret derivation with the private part of the local EC key pair and the public part of the remote EC key pair.  The shared secret is then provided as input to HKDF (with both extract and expand, and empty salt) <xref target="RFC5869"/> to generate the ephemeral key (K_ephemeral).</t>

<t>The ephemeral key generated by this operation is used to encrypt all subsequent KMS requests and responses passed between the resource client and KMS.  When encrypting such a message, the sender MUST assign a value to the kid attribute of the header of the resulting JWE object, and this value MUST match the URL of the key as provided to the client in the KMS response message described above.  This provides the recipient with a means for identifying the key necessary to decrypt the message.</t>

<t>The KMS SHOULD accept messages encrypted with the ephemeral key up to and until the key expiration date as provided in the response message described above.  On expiration of the ephemeral key, the KMS MUST reject all further requests submitted using this key, and a client wishing to submit further requests to the KMS MUST re-establish the secure channel by requesting the creation of a new ephemeral key.</t>

</section>
<section anchor="delete-ephemeral-key" title="Delete Ephemeral Key">

<t>In the event that a resource client’s ephemeral key has become compromised, a client SHOULD submit a request to the KMS to delete the ephemeral key.</t>

<t>The request message conforms to the basic request message structure, where the method is “delete”, and the uri is that of the ephemeral key to be deleted.</t>

<t>Request payload definition:</t>

<figure><artwork><![CDATA[
root {
  request
}
]]></artwork></figure>

<t>Request message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "delete",
  "uri": "/ecdhe/ea9f3858-1240-4328-ae22-a15f6072306f",
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5"
})
]]></artwork></figure>

<t>The response message conforms to the basic response message structure, and MUST NOT include a representation of the deleted ephemeral key.</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response
}
]]></artwork></figure>

<t>Response message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "status": 204,
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5"
})
]]></artwork></figure>

<t>If successful, the KMS response to a delete ephemeral key request MUST have a status of 204.  In the case of a request failure, the KMS response status SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the failure condition.</t>

<t>On successful deletion of an ephemeral key, the KMS MUST NOT, from that time forward, accept any requests encrypted with that ephemeral key.</t>

</section>
<section anchor="create-resource" title="Create Resource">

<t>When a client intends to initiate E2E encryption of a communications resource, it begins by requesting the creation of a KMS resource object.  This resource object logically represents the communications resource within the KMS data model.</t>

<t>As part of a create resource request, a KMS server MUST create at least one authorization object on the newly created resource object to explicitly authorize the user making the request.  A client MAY request the immediate creation of one or more additional authorizations such that corresponding users may be immediately authorized to access and operate on the new resource object. Also, a client MAY request number of anonymous authorizations to be created on the new resource object, specified by anonymous attribute in the request. If for any reason one or more requested authorizations cannot be applied to the new resource object, the entire create resource request MUST be failed by the KMS.</t>

<t>As part of a create resource request, a client MAY request the immediate binding of one or more unbound KMS keys to the new resource object.  If any key indicated in the request is already bound, or is otherwise invalid (e.g. expired), the entire create resource request MUST be failed by the KMS.</t>

<t>Also, the client MAY request a time to live for the new resource object. The TTL is in seconds with a default of 0 (never expires). Implementations MAY enforce minimum and/or maximum values for TTL. If a requested TTL value is not within the server’s acceptable range, it SHOULD respond with a 400 and response message indicating the server’s acceptable range.</t>

<t>The request message conforms to the basic request message structure, where the method is “create”, the uri is “/resources”, and additional user identifiers and/or key URIs are provided in a manner consistent with the following.</t>

<t>Request payload definition:</t>

<figure><artwork><![CDATA[
authIds (
  "authIds" : [ *string ]
)

root {
  request,
  ?authIds,
  ?anonymous,
  ?keyUris,
  ?ttl
}
]]></artwork></figure>

<t>Request message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "create",
  "uri": "/resources",
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "authIds": [
    "b46e8124-b6e8-47e0-af0d-e7f1a2072dac",
    "39d56a84-c6f9-459e-9fd1-40ab4ad3e89a"
  ],
  "keyUris": [
    "/keys/b4cba4da-a984-4af2-b54f-3ca04acfe461",
    "/keys/2671413c-ab80-4f19-a0a4-ae07e1a94e90"
  ],
  "ttl": 604800
})
]]></artwork></figure>

<t>The response message conforms to the basic response message structure, and includes a representation of the created KMS resource object.</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response,
  resource
}
]]></artwork></figure>

<t>Response message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "status": 201,
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "resource": {
      "uri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094",
      "authorizationUris": [
        "/authorizations/50e9056d-0700-4919-b55f-84cd78a2a65e",
        "/authorizations/db4c95ab-3fbf-42a8-989f-f53c1f13cc9a"
      ],
      "keyUris": [
        "/keys/b4cba4da-a984-4af2-b54f-3ca04acfe461",
        "/keys/2671413c-ab80-4f19-a0a4-ae07e1a94e90"
      ],
      "expirationDate": "2014-10-09T16:54:48Z"
  }
})
]]></artwork></figure>

<t>If successful, the KMS response to a create resource request MUST have a status of 201.  In the case of a request failure, the KMS response status SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the failure condition.</t>

</section>
<section anchor="retrieve-resource" title="Retrieve Resource">

<t>A client that is authorized on a given KMS resource object may retrieve the current state of that object as well as that of current set of KMS authorization objects and bound KMS keys.</t>

<t>The request message conforms to the basic request message structure, where the method is “retrieve”, and the uri is that of the KMS resource object as returned by the create operation from which it originated.</t>

<t>Request payload definition:</t>

<figure><artwork><![CDATA[
root {
  request
}
]]></artwork></figure>

<t>Request message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "retrieve",
  "uri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094",
  "requestId": "db1e4d2a-d483-4fe7-a802-ec5c0d32295f",
})
]]></artwork></figure>

<t>The response message conforms to the basic response message structure, and includes a representation of the retrieved KMS resource object.</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response,
  resource
}
]]></artwork></figure>

<t>Response message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "status": 200,
  "requestId": "db1e4d2a-d483-4fe7-a802-ec5c0d32295f",
  "resource": {
      "uri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094",
      "authorizationUris": [
        "/authorizations/50e9056d-0700-4919-b55f-84cd78a2a65e",
        "/authorizations/db4c95ab-3fbf-42a8-989f-f53c1f13cc9a"
      ],
      "keyUris": [
        "/keys/b4cba4da-a984-4af2-b54f-3ca04acfe461",
        "/keys/2671413c-ab80-4f19-a0a4-ae07e1a94e90"
      ]
  }
})
]]></artwork></figure>

<t>If successful, the KMS response to a retrieve resource request MUST have a status of 200.  In the case of a request failure, the KMS response status SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the failure condition.</t>

</section>
<section anchor="create-keys" title="Create Keys">

<t>When a client requires a symmetric key for use in the E2E encryption of a communications resource, it begins by requesting the creation of one or more keys from the KMS.  The initial state of a newly created key is “unbound” in the sense that it does not yet belong to a particular resource.  A client may submit this request at any time, even before the communications resource exists.  The keys returned by this request are unbound, which is to say not yet associated with any KMS resource object.</t>

<t>The request message conforms to the basic request message structure, where the method is “create”, the uri is “/keys”, and an additional count attribute is introduced to indicate the number of keys to be created.</t>

<t>Request payload definition:</t>

<figure><artwork><![CDATA[
root {
  request,
  "count": integer
}
]]></artwork></figure>

<t>Request message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "create",
  "uri": "/keys",
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "count": 2  
})
]]></artwork></figure>

<t>The response message conforms to the basic response message structure with the addition of an array of key object representations, one for each unbound key created.</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response,
  keys / keyUris
}
]]></artwork></figure>

<t>Response message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "status": 201,
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "keys": [
    {
      "uri": "/keys/52100fa4-c222-46d0-994d-1ca885e4a3a2",
      "jwk": {
        "kid": "52100fa4-c222-46d0-994d-1ca885e4a3a2",
        "kty": "oct",
        "k": "ZMpktzGq1g6_r4fKVdnx9OaYr4HjxPjIs7l7SwAsgsg"
      }
      "userId": "842e2d82-7e71-4040-8eb9-d977fe888807",
      "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
      "createDate": "2014-10-09T15:54:48Z",
      "expirationDate": "2014-10-09T16:04:48Z"
    },
    {
      "uri": "/keys/fed33890-f9fa-43ad-a9f8-ab55a983a543",
      "jwk": {
        "kid": "fed33890-f9fa-43ad-a9f8-ab55a983a543",
        "kty": "oct",
        "k": "q2znCXQpbBPSZBUddZvchRSH5pSSKPEHlgb3CSGIdpL"
      }
      "userId": "842e2d82-7e71-4040-8eb9-d977fe888807",
      "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
      "createDate": "2014-10-09T15:54:48Z",
      "expirationDate": "2014-10-09T16:04:48Z"
    }
  ]
})
]]></artwork></figure>
<t>Each key object in the response to a create unbound keys request includes a single JWK <xref target="I-D.ietf-jose-json-web-key"/> representing a new symmetric key of 256 bits generated by a cryptographically secure PRNG.  Note that, as unbound keys, the resourceUri attribute of each key is either undefined or null.  All keys SHOULD have the createDate assigned as the current time and an expirationDate assigned as the latest point in time before which the key may be bound to a resource (both in <xref target="RFC3339"/> date-time format).</t>

<t>The clientId attribute of each created key MUST be the clientId provided by the client in the client.clientId attribute of the request.</t>

<t>As shown in the response payload definition, the KMS MUST return either an array of key object representations or an array of key object uris.  It is at the KMS server’s discretion which of these is returned.</t>

<t>If successful, the KMS response to a create unbound keys request MUST have a status of 201.  In the case of a request failure, the KMS response status SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the failure condition.</t>

</section>
<section anchor="update-key-bind" title="Update Key (Bind)">

<t>To initiate the use of an unbound KMS key in securing a communications resource, a client will create a corresponding KMS resource object and subsequently bind the unbound key to that resource.  A client MAY begin using an unbound KMS key to encrypt a communications resource prior to the binding of that key.</t>

<t>The request message conforms to the basic request message structure, where the method is “update”, the uri is that of the key to be bound, and an additional resourceUri attribute is introduced to indicate the KMS resource object to which the key is to be bound.  If the user making a bind unbound key request does not have an authorization on the resource indicated by the resourceUri, or is not the user for whom the unbound key was originally created, the KMS MUST fail the request.  The KMS SHOULD fail the request if the clientId of the request does not match that of the unbound key.</t>

<t>Request payload definition:</t>

<figure><artwork><![CDATA[
root {
  request,
  "resourceUri" : kmsUri
}
]]></artwork></figure>

<t>Request message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "update",
  "uri": "/keys/52100fa4-c222-46d0-994d-1ca885e4a3a2",
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "resourceUri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094"
})
]]></artwork></figure>

<t>The response message conforms to the basic response message structure, and includes a representation of the full state of the newly bound key.</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response,
  key
}
]]></artwork></figure>

<t>Response message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
{
  "status": 200,
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "key": {
    "uri": "/keys/52100fa4-c222-46d0-994d-1ca885e4a3a2",
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "jwk": {
      "kid": "52100fa4-c222-46d0-994d-1ca885e4a3a2",
      "kty": "oct",
      "k": "ZMpktzGq1g6_r4fKVdnx9OaYr4HjxPjIs7l7SwAsgsg"
    }
    "userId": "842e2d82-7e71-4040-8eb9-d977fe888807",
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "createDate": "2014-10-09T15:54:48Z",
    "bindDate": "2014-10-09T15:55:34Z",
    "expirationDate": "2014-10-10T15:55:34Z",
    "resourceUri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094"
  }
})
]]></artwork></figure>

<t>On successfully binding a formerly unbound KMS key to a resource object, the state of the KMS key object MUST reflect the updated resourceUri attribute,  MUST reflect a bindDate as the current time, and MUST reflect an expirationDate as the time after which clients MUST NOT use this key for encryption as provided by KMS policy.  Subsequently, the KMS MUST regard the key as bound to the KMS resource object identified by the resourceUri and MUST reject subsequent requests to bind the same key to any other resource object.</t>

<t>If successful, the KMS response to a bind unbound key request MUST have a status of 200.  In the case of a request failure, the KMS response status SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the failure condition.</t>

</section>
<section anchor="retrieve-keys" title="Retrieve Keys">

<t>Clients engaging in E2E encryption require a means for retrieving keys from the KMS.  A key request may take one of three forms, it may be a request for</t>

<t><list style="symbols">
  <t>a specific key,</t>
  <t>all keys bound to a particular resource,</t>
  <t>a subset of keys bound to a particular resource.</t>
</list></t>

<t>In all cases, the request message conforms to the basic request message structure with “retrieve” as the value for the method attribute.</t>

<t>To retrieve an individual key, the uri of the request is that of the key object to be retrieved.  If the key is unbound, the KMS MUST reject the request unless it originates from the user that requested the key’s creation, and SHOULD reject the request unless it originates from the same client that requested the key’s creation (as determined by clientId).  If the key is bound, the KMS MUST reject the request if the request originates from a user for which there does not exist a corresponding authorization on the resource to which the requested key is bound.</t>

<t>To retrieve all keys bound to a resource, the uri of the request is that of the resource concatenated with “/keys”.  The KMS MUST reject the request if the request originates from a user for which there does not exist a corresponding authorization on the resource.</t>

<t>To retrieve a subset of keys bound to a resource, the client submits a request in the same fashion as for requesting all keys but also includes one or more additional attributes indicating selection criteria.  These additional attributes include the following:</t>

<t><list style="symbols">
  <t>boundAfter</t>
  <t>boundBefore</t>
</list></t>

<t>Each of these parameters is optional and clients MAY employ them in any combination.</t>

<t>If the request includes a “boundAfter” attribute, the value MUST conform to the <xref target="RFC3339"/> date-time format and the KMS response MUST NOT include any key with a “bindDate” that chronologically precedes it.  Similarly, if the request includes a “boundBefore” attribute, the value MUST conform to the <xref target="RFC3339"/> date-time format and the KMS response MUST NOT include any key with a “bindDate” that is either equal to or chronologically subsequent to it.</t>

<t>To limit the number of keys returned in a KMS response, a client MAY include a “count” attribute.  If the request includes a “count” attribute, it must be of JSON type integer and the cardinality of the set of keys returned in the KMS response MUST NOT exceed its value.  In the event it becomes necessary for the KMS to truncate the set of keys included in the KMS response, due to the limitations imposed by the “count” attribute, the truncated subset MUST be composed of those keys which satisfy the request’s other selection criteria (if any) and also constitute a subset of that selection for which the elements possess the chronologically largest “bindDate” values.</t>

<t>Request payload definition:</t>

<figure><artwork><![CDATA[
root {
  request,
  ?"boundAfter" : date-time,
  ?"boundBefore" : date-time,
  ?"count" : integer
}
]]></artwork></figure>

<t>Request message example (individual key):</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "retrieve",
  "uri": "/keys/52100fa4-c222-46d0-994d-1ca885e4a3a2",
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5"
})
]]></artwork></figure>

<t>Request message example (10 most recently bound keys):</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "retrieve",
  "uri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094/keys",
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "count": 10
})
]]></artwork></figure>

<t>Request message example (keys bound after a given time, 25 max):</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "retrieve",
  "uri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094/keys",
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "boundAfter": "2015-01-11T18:23:21Z",
  "count": 25
})
]]></artwork></figure>

<t>The response message conforms to the basic response message structure and includes a representation of the key or keys selected by the request.  When responding to a request for a specific key, the KMS will return a response that includes a KMS key object representation as described in <xref target="proto-kms-key-object"/>.  When responding to a request for multiple keys, the KMS will return a response that includes an array of KMS key object representations.</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response,
  key / keys
}
]]></artwork></figure>

<t>Response message example (for specific key):</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
{
  "status": 200,
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "key": {
    "uri": "/keys/52100fa4-c222-46d0-994d-1ca885e4a3a2",
    "jwk": {
      "kid": "52100fa4-c222-46d0-994d-1ca885e4a3a2",
      "kty": "oct",
      "k": "ZMpktzGq1g6_r4fKVdnx9OaYr4HjxPjIs7l7SwAsgsg"
    }
    "userId": "842e2d82-7e71-4040-8eb9-d977fe888807",
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "createDate": "2014-10-09T15:54:48Z",
    "bindDate": "2014-10-09T15:55:34Z",
    "expirationDate": "2014-10-10T15:55:34Z",
    "resourceUri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094"
  }
})
]]></artwork></figure>

<t>Response message example (for keys bound to a specific resource):</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
{
  "status": 200,
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "keys": [
  {
    "uri": "/keys/52100fa4-c222-46d0-994d-1ca885e4a3a2",
    "jwk": {
      "kid": "52100fa4-c222-46d0-994d-1ca885e4a3a2",
      "kty": "oct",
      "k": "ZMpktzGq1g6_r4fKVdnx9OaYr4HjxPjIs7l7SwAsgsg"
    }
    "userId": "842e2d82-7e71-4040-8eb9-d977fe888807",
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "createDate": "2014-10-09T15:54:48Z",
    "bindDate": "2014-10-09T15:55:34Z",
    "expirationDate": "2014-10-10T15:55:34Z",
    "resourceUri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094"
  },
  {
    "uri": "/keys/fed33890-f9fa-43ad-a9f8-ab55a983a543",
    "jwk": {
      "kid": "fed33890-f9fa-43ad-a9f8-ab55a983a543",
      "kty": "oct",
      "k": "q2znCXQpbBPSZBUddZvchRSH5pSSKPEHlgb3CSGIdpL"
    }
    "userId": "842e2d82-7e71-4040-8eb9-d977fe888807",
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "createDate": "2014-10-09T15:54:48Z",
    "bindDate": "2014-10-09T15:56:43Z",
    "expirationDate": "2014-10-10T15:56:43Z",
    "resourceUri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094"
  }]
})
]]></artwork></figure>

<t>If successful, the KMS response to a retrieve bound keys request MUST have a status of 200.  In the case of a request failure, the KMS response status SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the failure condition.</t>

</section>
<section anchor="create-authorizations" title="Create Authorizations">

<t>An authorization establishes a relationship between a resource and a user that entitles the user to retrieve bound keys from, and bind new keys to, that resource.  The KMS resource authorization model is viral in the sense that, once a user has been authorized on a resource, that user is also entitled to authorize other users on that resource.  These authorizations are created through create authorization requests.</t>

<t>The request message conforms to the basic request message structure, where the method is “create”, and the uri is “/authorizations”.  Additional attributes are required to indicate the resource on which authorizations are to be added, as well as the set of users for whom these new authorizations are to be created, also the number of anonymous authorization to be created.</t>

<figure><artwork><![CDATA[
root {
  request,
  "resourceUri" : kmsUri,
  "authIds" : [ *string ],
  "anonymous" : int
}
]]></artwork></figure>

<t>Request message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "create",
  "uri": "/authorizations",
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "resourceUri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094",
  "authIds": [
    "119a0582-2e2b-4c0c-ba6a-753d05171803",
    "557ac05d-5751-43b4-a04b-e7eb1499ee0a"
  ],
  "anonymous": 1
})
]]></artwork></figure>

<t>The response message conforms to the basic response message structure, and includes a representation of the set of KMS authorization objects created by the request.</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response,
  authorizations
}
]]></artwork></figure>

<t>Response message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
{
  "status": 201,
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "authorizations": [
  {
    "uri": "/authorizations/79a39ed9-a8e5-4d1f-9ae2-e27857fc5901",
    "authId": "119a0582-2e2b-4c0c-ba6a-753d05171803",
    "resourceUri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094"
  },
  {
    "uri": "/authorizations/5aaca3eb-ca4c-47c9-b8e2-b20f47568b7b",
    "authId": "557ac05d-5751-43b4-a04b-e7eb1499ee0a",
    "resourceUri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094"
  },
  {
    "uri": "/authorizations/5aaca3eb-ca4c-47c9-b8e2-b20f47568b7b",
    "bearer": "EYHHBGGE2YWYtMGE2NC0...",
    "resourceUri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094"
  }]
})
]]></artwork></figure>

<t>If successful, the KMS response to a create authorizations request MUST have a status of 201.  In the case of a request failure, the KMS response status SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the failure condition.  If for any reason one or more requested authorizations cannot be created or applied to the resource object, the entire create authorizations request MUST be failed by the KMS.</t>

</section>
<section anchor="retrieve-authorizations" title="Retrieve Authorizations">

<t>A client may explicitly request the set of all authorizations on a given KMS resource object.  The uri of the request is that of the resource concatenated with “/authorizations”.  The KMS MUST reject the request if the request originates from a user for which there does not exist a corresponding authorization on the resource.</t>

<t>Request payload definition:</t>

<figure><artwork><![CDATA[
root {
  request
}
]]></artwork></figure>

<t>Request message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "retrieve",
  "uri": "/resources/7f35c3eb-95d6-4558-1942e5f03094/authorizations",
  "requestId": "913d7ae3-8945-46ca-8ed1-2b287c1370ce"
})
]]></artwork></figure>

<t>The response message conforms to the basic response message structure and includes an array of KMS authorization object representations.</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response,
  authorizations
}
]]></artwork></figure>

<t>Response message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
{
  "status": 200,
  "requestId": "913d7ae3-8945-46ca-8ed1-2b287c1370ce",
  "authorizations": [
  {
    "uri": "/authorizations/79a39ed9-a8e5-4d1f-9ae2-e27857fc5901",
    "authId": "119a0582-2e2b-4c0c-ba6a-753d05171803",
    "resourceUri": "/resources/7f35c3eb-95d6-4558-1942e5f03094"
  },
  {
    "uri": "/authorizations/5aaca3eb-ca4c-47c9-b8e2-b20f47568b7b",
    "authId": "557ac05d-5751-43b4-a04b-e7eb1499ee0a",
    "resourceUri": "/resources/7f35c3eb-95d6-4558-1942e5f03094"
  }]
})
]]></artwork></figure>

<t>If successful, the KMS response to a retrieve bound keys request MUST have a status of 200.  In the case of a request failure, the KMS response status SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the failure condition.</t>

</section>
<section anchor="retrieve-authorizations-by-user" title="Retrieve Authorizations By User">

<t>To query an authorization for the specific user from a KMS resource object, any user currently authorized on the same resource object may issue retrieve authorization request for the specific user. The request message conforms to the basic request message structure, where the method is “retrieve”, and the URI is “/authorizations” followed by authorization id.</t>

<t>Request payload definition:</t>

<figure><artwork><![CDATA[
root {
  request
}
]]></artwork></figure>

<t>Request message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "retrieve",
  "uri": "/resources/a8c3c42f-5348-4289-83f0-d833d31ba93c/authorizations?authId=119a0582-2e2b-4c0c-ba6a-753d05171803",
  "requestId": "d4a741cd-0e16-4ff8-9a61-4a4b841d9e93"
})
]]></artwork></figure>

<t>If successful, the KMS response to a retrieve authorization for the specific user request MUST have a status of 200.  The response message conforms to the basic response message structure and includes an array of KMS authorization object representations. The array will be empty if the specified user is not authorized for the KMS resource object. The array will contain one single authorization entry for the specified user if that user is authorized for the KMS resource object.  In the case of a request failure, the KMS response status SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the failure condition.</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response,
  authorizations
}
]]></artwork></figure>

<t>Response message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
{
  "status": 200,
  "requestId": "d4a741cd-0e16-4ff8-9a61-4a4b841d9e93",
  "authorizations": [
  {
    "uri": "/authorizations/ef0a5291-49cb-413f-832b-b437bc542825",
    "authId": "119a0582-2e2b-4c0c-ba6a-753d05171803",
    "resourceUri": "/resources/a8c3c42f-5348-4289-83f0-d833d31ba93c"
  }]
})
]]></artwork></figure>

</section>
<section anchor="delete-authorization" title="Delete Authorization">

<t>To remove an authorization from a KMS resource object, any user currently authorized on the same resource object may issue a delete authorization request.  The request message conforms to the basic request message structure, where the method is “delete”, and the URI is either that of the authorization object to be deleted, or the URI of the collection of authorizations within a particular KMS resource object appended with an authId query parameter whose value matches that of the authorization object to be deleted.</t>

<t>Request payload definition:</t>

<figure><artwork><![CDATA[
root {
  request
}
]]></artwork></figure>

<t>Request message example, explicitly identifying the URI of the authorization object to be deleted:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "delete",
  "uri": "/authorizations/5aaca3eb-ca4c-47c9-b8e2-b20f47568b7b"
})
]]></artwork></figure>

<t>Request message example, implicitly identifying the authorization object to be deleted by the KMS resource object to which it belongs plus the value of its authId attribute:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "delete",
  "uri": "/resources/7f35c3eb-95d6-4558-1942e5f03094
         /authorizations?authId=557ac05d-5751-43b4-a04b-e7eb1499ee0a",
})
]]></artwork></figure>

<t>Note, in the example above, the URI attribute value is a continuous string of non-whitespace characters. Whitespace has been added here for readability.</t>

<t>The response message conforms to the basic response message structure, and includes a representation of the authorization object that was deleted.</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response,
  ?authorization
}
]]></artwork></figure>

<t>Response message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
{
  "status": 200,
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "authorization": {
    "uri": "/authorizations/5aaca3eb-ca4c-47c9-b8e2-b20f47568b7b",
    "authId": "557ac05d-5751-43b4-a04b-e7eb1499ee0a",
    "resourceUri": "/resources/7f35c3eb-95d6-4558-a7fc-1942e5f03094"
  }
})
]]></artwork></figure>

<t>If successful, the KMS response to a delete authorization request MUST have a status of 200 if the authorization object representation is included, and 204 if not.  In the case of a request failure, the KMS response status SHOULD be that of an <xref target="RFC7231"/> defined status code with semantics that correspond to the failure condition.</t>

</section>
<section anchor="ping" title="Ping">

<t>Ping is a simple request intended to provide an efficient means for verifying the integrity of the secure channel between client and KMS.  Ping MUST be implemented as a safe and idempotent operation that causes the server to do nothing more than return a basic response payload in reaction to the client request.  The method of a ping request is “update” and the uri is “/ping”.</t>

<t>Request payload definition:</t>

<figure><artwork><![CDATA[
root {
  request
}
]]></artwork></figure>

<t>Request message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5",
  "client": {
    "clientId": "android_a6aa012a-0795-4fb4-bddb-f04abda9e34f",
    "credential": {
      "bearer": "ZWU5NGE2YWYtMGE2NC0..."
    }
  }  
  "method": "update",
  "uri": "/ping"
})
]]></artwork></figure>

<t>The response message conforms to the basic response message structure with no additional data.</t>

<t>Response payload definition:</t>

<figure><artwork><![CDATA[
root {
  response
}
]]></artwork></figure>

<t>Response message example:</t>

<figure><artwork><![CDATA[
JWE(K_ephemeral, {
{
  "status": 200,
  "requestId": "10992782-e096-4fd3-9458-24dca7a92fa5"
})
]]></artwork></figure>

<t>If successful, the client may deduce that the KMS was able to successfully decrypt the received KMS request message, parse the contents, confirm the identity and authorization of the requesting client, and return a suitable response.</t>

</section>
</section>
</section>
<section anchor="mandatory-to-implement" title="Mandatory-to-Implement">

<t>Implementations MUST support the following JWK key types from <xref target="I-D.ietf-jose-json-web-algorithms"/>:</t>

<t><list style="symbols">
  <t>“RSA” for the KMS static public/private key</t>
  <t>“EC” for the Ephemeral Diffie Hellman exchange</t>
  <t>“oct” for all symmetric keys</t>
</list></t>

<t>Implementations MUST support “PS256” (RSASSA-PSS using SHA-256 and MGF1 with SHA-256) from <xref target="I-D.ietf-jose-json-web-algorithms"/> for signatures using the KMS static public/private key for <xref target="proto-ecdhe"/>.</t>

<t>Implementations MUST support JWK Elliptic Curve type “P-256” (NIST P-256 curve) from <xref target="I-D.ietf-jose-json-web-algorithms"/> for <xref target="proto-ecdhe"/>.</t>

<t>Implementations MUST support “RSA-OAEP” (RSAES OAEP using default parameters) from <xref target="I-D.ietf-jose-json-web-algorithms"/> for key encryption using the KMS static public/private key for <xref target="proto-ecdhe"/>.</t>

<t>Implementations MUST support “dir” (Direct Key Agreement Key Management Mode) from <xref target="I-D.ietf-jose-json-web-algorithms"/> for all operations other than <xref target="proto-ecdhe"/>.</t>

<t>Implementations MUST support “A256GCM” (AES GCM using 256 bit key) from <xref target="I-D.ietf-jose-json-web-algorithms"/> for content encryption for all operations other than <xref target="proto-ecdhe"/>.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Security considerations are discussed throughout this document.  Additional considerations may be added here as needed.</t>

</section>
<section anchor="appendix-a-acknowledgments" title="Appendix A. Acknowledgments">

<t>This specification is the work of several contributors.  In particular, the following individuals contributed ideas, feedback, and wording that influenced this specification:</t>

<t>Cullen Jennings, Matt Miller, Suhas Nandakumar, Jonathan Rosenberg, Bo Zou</t>

</section>
<section anchor="appendix-b-document-history" title="Appendix B. Document History">

<t>-00</t>

<t><list style="symbols">
  <t>Initial draft.</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC5280;
&RFC5869;
&RFC7159;
&RFC6120;
&I-D.ietf-jose-json-web-encryption;
&I-D.ietf-jose-json-web-key;
&I-D.ietf-jose-json-web-signature;
&I-D.ietf-jose-json-web-algorithms;
&RFC4949;
&RFC6749;
&RFC6125;
&RFC2822;
&RFC3339;
&RFC7231;


    </references>

    <references title='Informative References'>

<reference anchor="OTR" target="https://otr.cypherpunks.ca/otr-wpes.pdf">
  <front>
    <title>Off-the-Record Communication, or, Why Not To Use PGP</title>
    <author initials="N." surname="Borisov" fullname="Nikita Borisov">
      <organization></organization>
    </author>
    <author initials="I." surname="Goldberg" fullname="Ian Goldberg">
      <organization></organization>
    </author>
    <author initials="E." surname="Brewer" fullname="Eric Brewer">
      <organization></organization>
    </author>
    <date year="2012"/>
  </front>
</reference>
&I-D.barnes-pervasive-problem;
&I-D.newton-json-content-rules;
&RFC5246;
&RFC4301;
&RFC5652;
&RFC4880;
&I-D.ietf-xmpp-posh;


    </references>



  </back>

<!-- ##markdown-source:
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
odC2V7GosMhTSlufodH/KrB3q7r/w7O3kDgfGMFD0/cKfSQU63D+bDmfsH2/
pj+UNV2k1DNKeQAe1aq9SI4dydks4mJ6Nknsg62uU2Us+5WcOhKnJfo5N2Ko
E6CtzzNfKWSIYNoqOLC3KZGTUSQ504E00ixMegCL9ziYrx05QW+mVZEZOQI0
EEw5d+84eLQuZ5Pt85LiVvMd5TGcNuVQ+w6iFUGHW4HuslZ3W6235c4X3FDh
fEC47DFx2nkOaxYGvelFHLTIYbU2OO1AAWPgcapY4hQ5MwDL15QGHp4ASmSB
j/waJS8K9S/zdOO815/dKq0puFJoHm1dBBKEPE5pp5ZIeHOD6AmouY0mSqdS
xVYxXaFUOb+Wr0Ih5Bvz+/qqVaVHW+v0LB80TrfC0e39tiPt4kj7206QXOgC
YzxL+r0kvmyEZ2Q3Jl5bYQCqpPap0u5428QHXGJ2CMr9NodcRYWKSXiX+BdK
EySDv+TvmhXBM8tZwtcKkGaa299GW5zCqisX6XGZkmm7XM4qzjiUtUw0J5uh
K4+1DiAYaaNSwCodPKQnNXX035+9fBk9w3zuHmkgR7BB0US7PrpLKL5fLUFn
53gP8QAsk6h8F6l1gdAkFASNBYjev+cE8h4XBcCXNp+9PtoCXSyf30cx5b28
PrK0rl0R7fpaKL1zjRbataorPW0VSw6eCRQrz4pkNK8wkJZGcP/WfbTbkX+3
VpTwX+gw+B+sKNVWMfyFlINWvekjqGujrTUf2yf4hdW18a9dRdn9ZVSUW2pG
K/WL+TKuaxY1un8P5UIRoUIC7vQIrjYhooIhy9YO2NRIPrgGgsG2tew5v+wR
BXkhkf0gqkrU1FMosc0vmyEJpuxnB75oYWbWWFN4PrhEbSa8szjNW/PFrsEv
KlXvtLuqzKYsvq5cOxdrQ/UstRqehRLpN2ce9nJIzyyloEcjzILg7JRFC868
vr3tug5wf+ndLJRE95NPLboPt2oKyQ1F97ZzCJSAVtEdYYgk+HqxHSRcQX78
DxY1/dqGRQldM5EqXtxMSeUGKHA3w+gmKt4h75lQwPoZOG8mB/r5IbEU2OuF
2tD3WEtpuShN4SpCOoqC0m/TSiLOVCW/kTpwKQE+7Pzx8uvjIgfR34wXZtla
jYIe6gUJuEanNIaSGZBcdi9hESg1MwV9cIyv06KsukynSVhHwwBWuHuTgbhL
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
Em6loGahQcOYwHmkrkXOGSWT1W0ZXelpnCxjPvfp0hlYLMWtmTBNnUunj2+H
LF3kglU8nX/+jTJ12RtxP5SklqXH0E0cEdZfCL3sH4/r8SKaKC2JgYiQKGR7
2Q0hE2NNw3InY1bkbfLgnqJx+vjF66eP2GnK+qoy1HxvuDNAB5csUl6N80Tq
dzovtYSBmspVNlGmuWLXMSSIMeH1I8dHSFuyJPeBDCHw3xloqEuEofBpygpj
2Tm0fslS8XJorKHMXm++fZhYSdJvobg8Ca63yIE86vIiz23j88OXJ2SoC4UQ
kCvii7wG+JNQ8vCP5INRBNnZByQJobB/I5pARIEVupVEgRWX651fbCFqmOQ+
NRE4DpfRhMYDIRQYn/8TXXx+FOR0uvfH7fuQBvXyNmh+m0/+DjLz39FI0GXJ
XqjNg2jU35HgHKIzD6KNs5uorlRiSXTT7Y1uqJTAIIP+wcFwb3/Y0/2D3d5o
muz0Dkbj/d5wlMRqTx0Mp2q80Xkv9Ms5FsSn0NT0DJZLCjMaqej6LZxOaTwH
K3VLi06lE19Mc6B15QJ8i+9nEdvro9AIZjGQzEuyCazf7dmZ3SQ125aRoMlo
0KyCcPvcb1ePiCJFZhK77NLkPKi0Jj02zBc2uFmWbitEYYqa8UQ0rEYx5xjb
NCnmyyu4kl8diUUr3IpElG24/rVFSt9/SaDe4HJ9hlyFE9mBPfnRK3WDYcaO
GYWZrszI0loc6nqJfIVAbpz8AJ3jIwLLQoFg6cJhAgEXe9Fms/QN2rNawdVI
NQ3Fq7QMjZY0slArdjOscxPwPmS3rJv57crWmDONdmpIzXJC/ZhsKS+vGKeY
jpy+tS4x0MZoeGdI98UWVWLLrw9aIgbkhRF/WoiVBmSldlU6vYxe9I+tElmb
BJkNefAnm0+InL2qIXidHh87IHV9QwsQzp+o4opveNkAxC/yNPm72lWqPxiq
Xn/vYAwkdTLqTZJk0pv2R2qSqAO9M5oSJa6baH6Sui/O9LPx/Xevx8+/OR7+
7bu/Vc/gv8+P+tvb2xv04Hv4/6BdesaXB/YWdk38/QN7Ae9I+/3gfNn0m+oK
Xz8+crt4i1+87A3Hu+a7d/jNX/Ov30x3v3szfvPoL4N8shuXD+fps5ePX+//
ePj0MqmUWuyMvy5/HPafmfdo6H+/ml8+310OX87LJ5OTl1fjNP1x9x/f9+Yn
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
ubKJPEYBAA==

-->

</rfc>

